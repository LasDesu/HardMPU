
HardMPU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000122  00800100  00001aca  00001b5e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001aca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000059c  00800222  00800222  00001c80  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001c80  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000118  00000000  00000000  00001cb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000186c  00000000  00000000  00001dc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008a7  00000000  00000000  00003634  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000013d3  00000000  00000000  00003edb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000288  00000000  00000000  000052b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000694  00000000  00000000  00005538  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001556  00000000  00000000  00005bcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000358  00000000  00000000  00007122  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	06 c1       	rjmp	.+524    	; 0x20e <__ctors_end>
       2:	00 00       	nop
       4:	22 c1       	rjmp	.+580    	; 0x24a <__bad_interrupt>
       6:	00 00       	nop
       8:	20 c1       	rjmp	.+576    	; 0x24a <__bad_interrupt>
       a:	00 00       	nop
       c:	1e c1       	rjmp	.+572    	; 0x24a <__bad_interrupt>
       e:	00 00       	nop
      10:	1c c1       	rjmp	.+568    	; 0x24a <__bad_interrupt>
      12:	00 00       	nop
      14:	1a c1       	rjmp	.+564    	; 0x24a <__bad_interrupt>
      16:	00 00       	nop
      18:	18 c1       	rjmp	.+560    	; 0x24a <__bad_interrupt>
      1a:	00 00       	nop
      1c:	16 c1       	rjmp	.+556    	; 0x24a <__bad_interrupt>
      1e:	00 00       	nop
      20:	14 c1       	rjmp	.+552    	; 0x24a <__bad_interrupt>
      22:	00 00       	nop
      24:	12 c1       	rjmp	.+548    	; 0x24a <__bad_interrupt>
      26:	00 00       	nop
      28:	10 c1       	rjmp	.+544    	; 0x24a <__bad_interrupt>
      2a:	00 00       	nop
      2c:	0e c1       	rjmp	.+540    	; 0x24a <__bad_interrupt>
      2e:	00 00       	nop
      30:	0c c1       	rjmp	.+536    	; 0x24a <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 ec 0c 	jmp	0x19d8	; 0x19d8 <__vector_13>
      38:	08 c1       	rjmp	.+528    	; 0x24a <__bad_interrupt>
      3a:	00 00       	nop
      3c:	06 c1       	rjmp	.+524    	; 0x24a <__bad_interrupt>
      3e:	00 00       	nop
      40:	04 c1       	rjmp	.+520    	; 0x24a <__bad_interrupt>
      42:	00 00       	nop
      44:	02 c1       	rjmp	.+516    	; 0x24a <__bad_interrupt>
      46:	00 00       	nop
      48:	00 c1       	rjmp	.+512    	; 0x24a <__bad_interrupt>
      4a:	00 00       	nop
      4c:	fe c0       	rjmp	.+508    	; 0x24a <__bad_interrupt>
      4e:	00 00       	nop
      50:	fc c0       	rjmp	.+504    	; 0x24a <__bad_interrupt>
      52:	00 00       	nop
      54:	fa c0       	rjmp	.+500    	; 0x24a <__bad_interrupt>
      56:	00 00       	nop
      58:	f8 c0       	rjmp	.+496    	; 0x24a <__bad_interrupt>
      5a:	00 00       	nop
      5c:	f6 c0       	rjmp	.+492    	; 0x24a <__bad_interrupt>
      5e:	00 00       	nop
      60:	f4 c0       	rjmp	.+488    	; 0x24a <__bad_interrupt>
      62:	00 00       	nop
      64:	f2 c0       	rjmp	.+484    	; 0x24a <__bad_interrupt>
      66:	00 00       	nop
      68:	f0 c0       	rjmp	.+480    	; 0x24a <__bad_interrupt>
      6a:	00 00       	nop
      6c:	ee c0       	rjmp	.+476    	; 0x24a <__bad_interrupt>
      6e:	00 00       	nop
      70:	ec c0       	rjmp	.+472    	; 0x24a <__bad_interrupt>
      72:	00 00       	nop
      74:	ea c0       	rjmp	.+468    	; 0x24a <__bad_interrupt>
      76:	00 00       	nop
      78:	e8 c0       	rjmp	.+464    	; 0x24a <__bad_interrupt>
      7a:	00 00       	nop
      7c:	e6 c0       	rjmp	.+460    	; 0x24a <__bad_interrupt>
      7e:	00 00       	nop
      80:	e4 c0       	rjmp	.+456    	; 0x24a <__bad_interrupt>
      82:	00 00       	nop
      84:	e2 c0       	rjmp	.+452    	; 0x24a <__bad_interrupt>
      86:	00 00       	nop
      88:	e0 c0       	rjmp	.+448    	; 0x24a <__bad_interrupt>
      8a:	00 00       	nop
      8c:	f4 06       	cpc	r15, r20
      8e:	f7 05       	cpc	r31, r7
      90:	f7 05       	cpc	r31, r7
      92:	f7 05       	cpc	r31, r7
      94:	f7 05       	cpc	r31, r7
      96:	f7 05       	cpc	r31, r7
      98:	f7 05       	cpc	r31, r7
      9a:	f7 05       	cpc	r31, r7
      9c:	f7 05       	cpc	r31, r7
      9e:	f7 05       	cpc	r31, r7
      a0:	f7 05       	cpc	r31, r7
      a2:	f7 05       	cpc	r31, r7
      a4:	f7 05       	cpc	r31, r7
      a6:	f7 05       	cpc	r31, r7
      a8:	f7 05       	cpc	r31, r7
      aa:	f7 05       	cpc	r31, r7
      ac:	f7 05       	cpc	r31, r7
      ae:	f7 05       	cpc	r31, r7
      b0:	f7 05       	cpc	r31, r7
      b2:	f7 05       	cpc	r31, r7
      b4:	f7 05       	cpc	r31, r7
      b6:	f7 05       	cpc	r31, r7
      b8:	f7 05       	cpc	r31, r7
      ba:	f7 05       	cpc	r31, r7
      bc:	f7 05       	cpc	r31, r7
      be:	f7 05       	cpc	r31, r7
      c0:	f7 05       	cpc	r31, r7
      c2:	f7 05       	cpc	r31, r7
      c4:	f7 05       	cpc	r31, r7
      c6:	f7 05       	cpc	r31, r7
      c8:	f7 05       	cpc	r31, r7
      ca:	f7 05       	cpc	r31, r7
      cc:	f7 05       	cpc	r31, r7
      ce:	f7 05       	cpc	r31, r7
      d0:	f7 05       	cpc	r31, r7
      d2:	f7 05       	cpc	r31, r7
      d4:	f7 05       	cpc	r31, r7
      d6:	f7 05       	cpc	r31, r7
      d8:	f7 05       	cpc	r31, r7
      da:	f7 05       	cpc	r31, r7
      dc:	f7 05       	cpc	r31, r7
      de:	f7 05       	cpc	r31, r7
      e0:	f7 05       	cpc	r31, r7
      e2:	f7 05       	cpc	r31, r7
      e4:	f7 05       	cpc	r31, r7
      e6:	f7 05       	cpc	r31, r7
      e8:	f7 05       	cpc	r31, r7
      ea:	f7 05       	cpc	r31, r7
      ec:	f7 05       	cpc	r31, r7
      ee:	f7 05       	cpc	r31, r7
      f0:	f7 05       	cpc	r31, r7
      f2:	f7 05       	cpc	r31, r7
      f4:	f7 05       	cpc	r31, r7
      f6:	f7 05       	cpc	r31, r7
      f8:	f7 05       	cpc	r31, r7
      fa:	f7 05       	cpc	r31, r7
      fc:	f7 05       	cpc	r31, r7
      fe:	f7 05       	cpc	r31, r7
     100:	f7 05       	cpc	r31, r7
     102:	f7 05       	cpc	r31, r7
     104:	f7 05       	cpc	r31, r7
     106:	f7 05       	cpc	r31, r7
     108:	f7 05       	cpc	r31, r7
     10a:	f7 05       	cpc	r31, r7
     10c:	f7 05       	cpc	r31, r7
     10e:	f7 05       	cpc	r31, r7
     110:	f7 05       	cpc	r31, r7
     112:	f7 05       	cpc	r31, r7
     114:	f7 05       	cpc	r31, r7
     116:	f7 05       	cpc	r31, r7
     118:	f7 05       	cpc	r31, r7
     11a:	f7 05       	cpc	r31, r7
     11c:	f7 05       	cpc	r31, r7
     11e:	f7 05       	cpc	r31, r7
     120:	f7 05       	cpc	r31, r7
     122:	f7 05       	cpc	r31, r7
     124:	f7 05       	cpc	r31, r7
     126:	f7 05       	cpc	r31, r7
     128:	f7 05       	cpc	r31, r7
     12a:	db 06       	cpc	r13, r27
     12c:	d5 06       	cpc	r13, r21
     12e:	f7 05       	cpc	r31, r7
     130:	f7 05       	cpc	r31, r7
     132:	f7 05       	cpc	r31, r7
     134:	f7 05       	cpc	r31, r7
     136:	e6 06       	cpc	r14, r22
     138:	e0 06       	cpc	r14, r16
     13a:	f7 05       	cpc	r31, r7
     13c:	f7 05       	cpc	r31, r7
     13e:	f7 05       	cpc	r31, r7
     140:	f7 05       	cpc	r31, r7
     142:	f7 05       	cpc	r31, r7
     144:	f7 05       	cpc	r31, r7
     146:	f7 05       	cpc	r31, r7
     148:	f7 05       	cpc	r31, r7
     14a:	f7 05       	cpc	r31, r7
     14c:	f7 05       	cpc	r31, r7
     14e:	f7 05       	cpc	r31, r7
     150:	f7 05       	cpc	r31, r7
     152:	f7 05       	cpc	r31, r7
     154:	f7 05       	cpc	r31, r7
     156:	f7 05       	cpc	r31, r7
     158:	f7 05       	cpc	r31, r7
     15a:	f7 05       	cpc	r31, r7
     15c:	f7 05       	cpc	r31, r7
     15e:	f7 05       	cpc	r31, r7
     160:	f7 05       	cpc	r31, r7
     162:	f7 05       	cpc	r31, r7
     164:	eb 06       	cpc	r14, r27
     166:	c6 06       	cpc	r12, r22
     168:	bc 06       	cpc	r11, r28
     16a:	f7 05       	cpc	r31, r7
     16c:	b1 06       	cpc	r11, r17
     16e:	f7 05       	cpc	r31, r7
     170:	ab 06       	cpc	r10, r27
     172:	f7 05       	cpc	r31, r7
     174:	f7 05       	cpc	r31, r7
     176:	f7 05       	cpc	r31, r7
     178:	f7 05       	cpc	r31, r7
     17a:	f7 05       	cpc	r31, r7
     17c:	f7 05       	cpc	r31, r7
     17e:	55 06       	cpc	r5, r21
     180:	55 06       	cpc	r5, r21
     182:	f7 05       	cpc	r31, r7
     184:	f7 05       	cpc	r31, r7
     186:	f7 05       	cpc	r31, r7
     188:	f7 05       	cpc	r31, r7
     18a:	f7 05       	cpc	r31, r7
     18c:	f7 05       	cpc	r31, r7
     18e:	f7 05       	cpc	r31, r7
     190:	f7 05       	cpc	r31, r7
     192:	4f 06       	cpc	r4, r31
     194:	49 06       	cpc	r4, r25
     196:	43 06       	cpc	r4, r19
     198:	3d 06       	cpc	r3, r29
     19a:	37 06       	cpc	r3, r23
     19c:	31 06       	cpc	r3, r17
     19e:	2b 06       	cpc	r2, r27
     1a0:	f7 05       	cpc	r31, r7
     1a2:	f7 05       	cpc	r31, r7
     1a4:	f7 05       	cpc	r31, r7
     1a6:	f7 05       	cpc	r31, r7
     1a8:	f7 05       	cpc	r31, r7
     1aa:	f7 05       	cpc	r31, r7
     1ac:	f7 05       	cpc	r31, r7
     1ae:	f7 05       	cpc	r31, r7
     1b0:	f7 05       	cpc	r31, r7
     1b2:	f7 05       	cpc	r31, r7
     1b4:	f7 05       	cpc	r31, r7
     1b6:	f7 05       	cpc	r31, r7
     1b8:	f7 05       	cpc	r31, r7
     1ba:	f7 05       	cpc	r31, r7
     1bc:	f7 05       	cpc	r31, r7
     1be:	f7 05       	cpc	r31, r7
     1c0:	f7 05       	cpc	r31, r7
     1c2:	f7 05       	cpc	r31, r7
     1c4:	f7 05       	cpc	r31, r7
     1c6:	f7 05       	cpc	r31, r7
     1c8:	f7 05       	cpc	r31, r7
     1ca:	f7 05       	cpc	r31, r7
     1cc:	21 06       	cpc	r2, r17
     1ce:	18 06       	cpc	r1, r24
     1d0:	18 06       	cpc	r1, r24
     1d2:	18 06       	cpc	r1, r24
     1d4:	f7 05       	cpc	r31, r7
     1d6:	18 06       	cpc	r1, r24
     1d8:	f7 05       	cpc	r31, r7
     1da:	18 06       	cpc	r1, r24
     1dc:	18 06       	cpc	r1, r24
     1de:	f7 05       	cpc	r31, r7
     1e0:	f7 05       	cpc	r31, r7
     1e2:	f7 05       	cpc	r31, r7
     1e4:	f7 05       	cpc	r31, r7
     1e6:	18 06       	cpc	r1, r24
     1e8:	18 06       	cpc	r1, r24
     1ea:	18 06       	cpc	r1, r24
     1ec:	18 06       	cpc	r1, r24
     1ee:	f7 05       	cpc	r31, r7
     1f0:	f7 05       	cpc	r31, r7
     1f2:	f7 05       	cpc	r31, r7
     1f4:	f7 05       	cpc	r31, r7
     1f6:	f7 05       	cpc	r31, r7
     1f8:	f7 05       	cpc	r31, r7
     1fa:	f7 05       	cpc	r31, r7
     1fc:	f7 05       	cpc	r31, r7
     1fe:	f7 05       	cpc	r31, r7
     200:	f7 05       	cpc	r31, r7
     202:	f7 05       	cpc	r31, r7
     204:	f7 05       	cpc	r31, r7
     206:	f7 05       	cpc	r31, r7
     208:	f7 05       	cpc	r31, r7
     20a:	f7 05       	cpc	r31, r7
     20c:	ea 05       	cpc	r30, r10

0000020e <__ctors_end>:
     20e:	11 24       	eor	r1, r1
     210:	1f be       	out	0x3f, r1	; 63
     212:	cf ef       	ldi	r28, 0xFF	; 255
     214:	d0 e4       	ldi	r29, 0x40	; 64
     216:	de bf       	out	0x3e, r29	; 62
     218:	cd bf       	out	0x3d, r28	; 61

0000021a <__do_copy_data>:
     21a:	12 e0       	ldi	r17, 0x02	; 2
     21c:	a0 e0       	ldi	r26, 0x00	; 0
     21e:	b1 e0       	ldi	r27, 0x01	; 1
     220:	ea ec       	ldi	r30, 0xCA	; 202
     222:	fa e1       	ldi	r31, 0x1A	; 26
     224:	00 e0       	ldi	r16, 0x00	; 0
     226:	0b bf       	out	0x3b, r16	; 59
     228:	02 c0       	rjmp	.+4      	; 0x22e <__do_copy_data+0x14>
     22a:	07 90       	elpm	r0, Z+
     22c:	0d 92       	st	X+, r0
     22e:	a2 32       	cpi	r26, 0x22	; 34
     230:	b1 07       	cpc	r27, r17
     232:	d9 f7       	brne	.-10     	; 0x22a <__do_copy_data+0x10>

00000234 <__do_clear_bss>:
     234:	27 e0       	ldi	r18, 0x07	; 7
     236:	a2 e2       	ldi	r26, 0x22	; 34
     238:	b2 e0       	ldi	r27, 0x02	; 2
     23a:	01 c0       	rjmp	.+2      	; 0x23e <.do_clear_bss_start>

0000023c <.do_clear_bss_loop>:
     23c:	1d 92       	st	X+, r1

0000023e <.do_clear_bss_start>:
     23e:	ae 3b       	cpi	r26, 0xBE	; 190
     240:	b2 07       	cpc	r27, r18
     242:	e1 f7       	brne	.-8      	; 0x23c <.do_clear_bss_loop>
     244:	03 d0       	rcall	.+6      	; 0x24c <main>
     246:	0c 94 63 0d 	jmp	0x1ac6	; 0x1ac6 <_exit>

0000024a <__bad_interrupt>:
     24a:	da ce       	rjmp	.-588    	; 0x0 <__vectors>

0000024c <main>:
char uart_mode = 0;

int main(void)
{
	// init GPIO
	PORTA = 0b11111111;	// pullups enabled
     24c:	8f ef       	ldi	r24, 0xFF	; 255
     24e:	82 b9       	out	0x02, r24	; 2
	PORTB = 0b11111000;	// bits 0-2 are driven externally
     250:	98 ef       	ldi	r25, 0xF8	; 248
     252:	95 b9       	out	0x05, r25	; 5
	DDRB  = 0b00011000;	// data read and data write latches
     254:	98 e1       	ldi	r25, 0x18	; 24
     256:	94 b9       	out	0x04, r25	; 4
	PORTC = 0b11111111;	// pullups enabled
     258:	88 b9       	out	0x08, r24	; 8
	PORTD = 0b11111111;	// pullups enabled
     25a:	8b b9       	out	0x0b, r24	; 11
	
	// init UART
	UCSR0B = (1<<TXEN0)|(1<<RXEN0);
     25c:	90 93 c1 00 	sts	0x00C1, r25
	UBRR0  = BAUD_MIDI;
     260:	87 e2       	ldi	r24, 0x27	; 39
     262:	90 e0       	ldi	r25, 0x00	; 0
     264:	90 93 c5 00 	sts	0x00C5, r25
     268:	80 93 c4 00 	sts	0x00C4, r24
	
	// init timer
	TCCR1B |= (1<<WGM12);		// timer1 ctc mode
     26c:	80 91 81 00 	lds	r24, 0x0081
     270:	88 60       	ori	r24, 0x08	; 8
     272:	80 93 81 00 	sts	0x0081, r24
	TIMSK1 |= (1<<OCIE1A);		// enable ctc interrupt
     276:	80 91 6f 00 	lds	r24, 0x006F
     27a:	82 60       	ori	r24, 0x02	; 2
     27c:	80 93 6f 00 	sts	0x006F, r24
	sei();						// enable global interrupts
     280:	78 94       	sei
	OCR1A   = F_CPU / RTCFREQ;	// ctc value
     282:	88 e8       	ldi	r24, 0x88	; 136
     284:	93 e1       	ldi	r25, 0x13	; 19
     286:	90 93 89 00 	sts	0x0089, r25
     28a:	80 93 88 00 	sts	0x0088, r24
	TCCR1B |= (1<<CS10);		// start timer with no prescaler
     28e:	80 91 81 00 	lds	r24, 0x0081
     292:	81 60       	ori	r24, 0x01	; 1
     294:	80 93 81 00 	sts	0x0081, r24
	
	// init emulator
	MPU401_Init(false, false);
     298:	60 e0       	ldi	r22, 0x00	; 0
     29a:	80 e0       	ldi	r24, 0x00	; 0
     29c:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <MPU401_Init>
		} */
    }
}

void send_isa_byte(unsigned char byte) {
	DDRA = 0xff;					// set porta to output
     2a0:	cf ef       	ldi	r28, 0xFF	; 255
	MPU401_Init(false, false);
	
    while(1)	// main loop
    {
        // first do isa i/o
		if (PINB & PIN_DRR) {		// isa data input latch is full
     2a2:	19 99       	sbic	0x03, 1	; 3
     2a4:	13 c0       	rjmp	.+38     	; 0x2cc <main+0x80>
			MPU401_WriteData(recv_isa_byte());
		}
		if (PINB & PIN_CRR) {		// isa control input latch is full
     2a6:	1a 99       	sbic	0x03, 2	; 3
     2a8:	1a c0       	rjmp	.+52     	; 0x2de <main+0x92>
			MPU401_WriteCommand(recv_isa_byte());
		}
		if (QueueUsed() && (~PINB & PIN_DSR)) {	// isa data output latch is empty, and data is waiting to be sent
     2aa:	cc d3       	rcall	.+1944   	; 0xa44 <QueueUsed>
     2ac:	89 2b       	or	r24, r25
     2ae:	c9 f3       	breq	.-14     	; 0x2a2 <main+0x56>
     2b0:	18 99       	sbic	0x03, 0	; 3
     2b2:	f7 cf       	rjmp	.-18     	; 0x2a2 <main+0x56>
			send_isa_byte(MPU401_ReadData());		// send data if there's any in the buffer
     2b4:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <MPU401_ReadData>
		} */
    }
}

void send_isa_byte(unsigned char byte) {
	DDRA = 0xff;					// set porta to output
     2b8:	c1 b9       	out	0x01, r28	; 1
	PORTA = byte;					// output byte on porta
     2ba:	82 b9       	out	0x02, r24	; 2
	PORTB &= ~PIN_IDW;				// lower IDW
     2bc:	2b 98       	cbi	0x05, 3	; 5
	__builtin_avr_delay_cycles(6);	// wait for logic to stabilize
     2be:	82 e0       	ldi	r24, 0x02	; 2
     2c0:	8a 95       	dec	r24
     2c2:	f1 f7       	brne	.-4      	; 0x2c0 <main+0x74>
	PORTB |= PIN_IDW;				// raise IDW
     2c4:	2b 9a       	sbi	0x05, 3	; 5
	DDRA = 0;						// set the port back to input
     2c6:	11 b8       	out	0x01, r1	; 1
	MPU401_Init(false, false);
	
    while(1)	// main loop
    {
        // first do isa i/o
		if (PINB & PIN_DRR) {		// isa data input latch is full
     2c8:	19 9b       	sbis	0x03, 1	; 3
     2ca:	ed cf       	rjmp	.-38     	; 0x2a6 <main+0x5a>
	PORTB |= PIN_IDW;				// raise IDW
	DDRA = 0;						// set the port back to input
}

unsigned char recv_isa_byte() {
	PORTB &= ~PIN_IDR;				// lower IDR
     2cc:	2c 98       	cbi	0x05, 4	; 5
	__builtin_avr_delay_cycles(6);	// wait for i/o to settle
     2ce:	82 e0       	ldi	r24, 0x02	; 2
     2d0:	8a 95       	dec	r24
     2d2:	f1 f7       	brne	.-4      	; 0x2d0 <main+0x84>
	unsigned char temp = PINA;		// capture what we find there
     2d4:	80 b1       	in	r24, 0x00	; 0
	PORTB |= PIN_IDR;				// raise IDR
     2d6:	2c 9a       	sbi	0x05, 4	; 5
	
    while(1)	// main loop
    {
        // first do isa i/o
		if (PINB & PIN_DRR) {		// isa data input latch is full
			MPU401_WriteData(recv_isa_byte());
     2d8:	f9 d7       	rcall	.+4082   	; 0x12cc <MPU401_WriteData>
		}
		if (PINB & PIN_CRR) {		// isa control input latch is full
     2da:	1a 9b       	sbis	0x03, 2	; 3
     2dc:	e6 cf       	rjmp	.-52     	; 0x2aa <main+0x5e>
	PORTB |= PIN_IDW;				// raise IDW
	DDRA = 0;						// set the port back to input
}

unsigned char recv_isa_byte() {
	PORTB &= ~PIN_IDR;				// lower IDR
     2de:	2c 98       	cbi	0x05, 4	; 5
	__builtin_avr_delay_cycles(6);	// wait for i/o to settle
     2e0:	82 e0       	ldi	r24, 0x02	; 2
     2e2:	8a 95       	dec	r24
     2e4:	f1 f7       	brne	.-4      	; 0x2e2 <main+0x96>
	unsigned char temp = PINA;		// capture what we find there
     2e6:	80 b1       	in	r24, 0x00	; 0
	PORTB |= PIN_IDR;				// raise IDR
     2e8:	2c 9a       	sbi	0x05, 4	; 5
        // first do isa i/o
		if (PINB & PIN_DRR) {		// isa data input latch is full
			MPU401_WriteData(recv_isa_byte());
		}
		if (PINB & PIN_CRR) {		// isa control input latch is full
			MPU401_WriteCommand(recv_isa_byte());
     2ea:	b1 d3       	rcall	.+1890   	; 0xa4e <MPU401_WriteCommand>
     2ec:	de cf       	rjmp	.-68     	; 0x2aa <main+0x5e>

000002ee <MIDI_RawOutByte>:

        pChan->used=0;
        pChan->next=0;
}

void MIDI_RawOutByte(Bit8u data) {
     2ee:	cf 93       	push	r28
     2f0:	df 93       	push	r29
        channel* pChan; /* SOFTMPU */

        if (midi.sysex.start && MIDI_sysex_delay) {
     2f2:	40 91 3e 06 	lds	r20, 0x063E
     2f6:	50 91 3f 06 	lds	r21, 0x063F
     2fa:	60 91 40 06 	lds	r22, 0x0640
     2fe:	70 91 41 06 	lds	r23, 0x0641
     302:	45 2b       	or	r20, r21
     304:	46 2b       	or	r20, r22
     306:	47 2b       	or	r20, r23
     308:	91 f0       	breq	.+36     	; 0x32e <MIDI_RawOutByte+0x40>
                                mov     MIDI_sysex_delay,0      ; Set original delay to zero
                } */
                /*Bit32u passed_ticks = GetTicks() - midi.sysex.start;
                if (passed_ticks < midi.sysex.delay) SDL_Delay(midi.sysex.delay - passed_ticks);*/ /* SOFTMPU */
				
				while (MIDI_sysex_delay) {
     30a:	20 91 1c 07 	lds	r18, 0x071C
     30e:	30 91 1d 07 	lds	r19, 0x071D
     312:	23 2b       	or	r18, r19
     314:	61 f0       	breq	.+24     	; 0x32e <MIDI_RawOutByte+0x40>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     316:	c1 ee       	ldi	r28, 0xE1	; 225
     318:	d4 e0       	ldi	r29, 0x04	; 4
     31a:	21 97       	sbiw	r28, 0x01	; 1
     31c:	f1 f7       	brne	.-4      	; 0x31a <MIDI_RawOutByte+0x2c>
     31e:	00 c0       	rjmp	.+0      	; 0x320 <MIDI_RawOutByte+0x32>
     320:	00 00       	nop
     322:	20 91 1c 07 	lds	r18, 0x071C
     326:	30 91 1d 07 	lds	r19, 0x071D
     32a:	23 2b       	or	r18, r19
     32c:	a1 f7       	brne	.-24     	; 0x316 <MIDI_RawOutByte+0x28>
					_delay_us(250);	// HardMPU
				}
        }

	/* Test for a realtime MIDI message */
	if (data>=0xf8) {
     32e:	88 3f       	cpi	r24, 0xF8	; 248
     330:	58 f0       	brcs	.+22     	; 0x348 <MIDI_RawOutByte+0x5a>
		midi.rt_buf[0]=data;
     332:	80 93 30 02 	sts	0x0230, r24
// extern QEMMInfo qemm;

static void PlayMsg(Bit8u* msg, Bitu len)
{
        for (Bitu i = 0; i < len; i++) {
			loop_until_bit_is_set(UCSR0A, UDRE0);	// wait for tx buffer to be empty
     336:	90 91 c0 00 	lds	r25, 0x00C0
     33a:	95 ff       	sbrs	r25, 5
     33c:	fc cf       	rjmp	.-8      	; 0x336 <MIDI_RawOutByte+0x48>
			UDR0 = msg[i];							// output the next byte
     33e:	80 93 c6 00 	sts	0x00C6, r24
                                PlayMsg(midi.cmd_buf,midi.cmd_len);
                        }
                        midi.cmd_pos=1;         //Use Running status
		}
	}
}
     342:	df 91       	pop	r29
     344:	cf 91       	pop	r28
     346:	08 95       	ret
		midi.rt_buf[0]=data;
		PlayMsg(midi.rt_buf,1);
		return;
	}        
	/* Test for a active sysex tranfer */
	if (midi.status==0xf0) {
     348:	20 91 22 02 	lds	r18, 0x0222
     34c:	30 91 23 02 	lds	r19, 0x0223
     350:	20 3f       	cpi	r18, 0xF0	; 240
     352:	31 05       	cpc	r19, r1
     354:	09 f4       	brne	.+2      	; 0x358 <MIDI_RawOutByte+0x6a>
     356:	41 c0       	rjmp	.+130    	; 0x3da <MIDI_RawOutByte+0xec>
			/*if (CaptureState & CAPTURE_MIDI) {
				CAPTURE_AddMidi( true, midi.sysex.used-1, &midi.sysex.buf[1]);
			}*/ /* SOFTMPU */
		}
	}
	if (data&0x80) {
     358:	87 fd       	sbrc	r24, 7
     35a:	cf c0       	rjmp	.+414    	; 0x4fa <MIDI_RawOutByte+0x20c>
     35c:	40 91 24 02 	lds	r20, 0x0224
     360:	50 91 25 02 	lds	r21, 0x0225
			midi.sysex.buf[0]=0xf0;
			midi.sysex.used=1;
                        midi.sysex.usedbufs=0;
		}
	}
	if (midi.cmd_len) {
     364:	41 15       	cp	r20, r1
     366:	51 05       	cpc	r21, r1
     368:	61 f3       	breq	.-40     	; 0x342 <MIDI_RawOutByte+0x54>
		midi.cmd_buf[midi.cmd_pos++]=data;
     36a:	e0 91 26 02 	lds	r30, 0x0226
     36e:	f0 91 27 02 	lds	r31, 0x0227
     372:	bf 01       	movw	r22, r30
     374:	6f 5f       	subi	r22, 0xFF	; 255
     376:	7f 4f       	sbci	r23, 0xFF	; 255
     378:	70 93 27 02 	sts	0x0227, r23
     37c:	60 93 26 02 	sts	0x0226, r22
     380:	ee 5d       	subi	r30, 0xDE	; 222
     382:	fd 4f       	sbci	r31, 0xFD	; 253
     384:	86 83       	std	Z+6, r24	; 0x06
		if (midi.cmd_pos >= midi.cmd_len) {
     386:	64 17       	cp	r22, r20
     388:	75 07       	cpc	r23, r21
     38a:	d8 f2       	brcs	.-74     	; 0x342 <MIDI_RawOutByte+0x54>
			/*if (CaptureState & CAPTURE_MIDI) {
				CAPTURE_AddMidi(false, midi.cmd_len, midi.cmd_buf);
                        }*/ /* SOFTMPU */

                        if (midi.fakeallnotesoff)
     38c:	80 91 42 06 	lds	r24, 0x0642
     390:	88 23       	and	r24, r24
     392:	09 f4       	brne	.+2      	; 0x396 <MIDI_RawOutByte+0xa8>
     394:	d9 c0       	rjmp	.+434    	; 0x548 <MIDI_RawOutByte+0x25a>
                        {
                                /* SOFTMPU: Test for "Note On" */
                                if ((midi.status&0xf0)==0x90)
     396:	c9 01       	movw	r24, r18
     398:	80 7f       	andi	r24, 0xF0	; 240
     39a:	99 27       	eor	r25, r25
     39c:	80 39       	cpi	r24, 0x90	; 144
     39e:	91 05       	cpc	r25, r1
     3a0:	09 f4       	brne	.+2      	; 0x3a4 <MIDI_RawOutByte+0xb6>
     3a2:	1c c1       	rjmp	.+568    	; 0x5dc <MIDI_RawOutByte+0x2ee>
                                        }

                                        PlayMsg(midi.cmd_buf,midi.cmd_len);
                                }
                                /* SOFTMPU: Test for "All Notes Off" */
                                else if (((midi.status&0xf0)==0xb0) &&
     3a4:	80 3b       	cpi	r24, 0xB0	; 176
     3a6:	91 05       	cpc	r25, r1
     3a8:	09 f4       	brne	.+2      	; 0x3ac <MIDI_RawOutByte+0xbe>
     3aa:	dd c0       	rjmp	.+442    	; 0x566 <MIDI_RawOutByte+0x278>
     3ac:	e8 e2       	ldi	r30, 0x28	; 40
     3ae:	f2 e0       	ldi	r31, 0x02	; 2
     3b0:	48 5d       	subi	r20, 0xD8	; 216
     3b2:	5d 4f       	sbci	r21, 0xFD	; 253
// extern QEMMInfo qemm;

static void PlayMsg(Bit8u* msg, Bitu len)
{
        for (Bitu i = 0; i < len; i++) {
			loop_until_bit_is_set(UCSR0A, UDRE0);	// wait for tx buffer to be empty
     3b4:	80 91 c0 00 	lds	r24, 0x00C0
     3b8:	85 ff       	sbrs	r24, 5
     3ba:	fc cf       	rjmp	.-8      	; 0x3b4 <MIDI_RawOutByte+0xc6>
			UDR0 = msg[i];							// output the next byte
     3bc:	81 91       	ld	r24, Z+
     3be:	80 93 c6 00 	sts	0x00C6, r24
/* SOFTMPU: Initialised in mpu401.c */
// extern QEMMInfo qemm;

static void PlayMsg(Bit8u* msg, Bitu len)
{
        for (Bitu i = 0; i < len; i++) {
     3c2:	e4 17       	cp	r30, r20
     3c4:	f5 07       	cpc	r31, r21
     3c6:	b1 f7       	brne	.-20     	; 0x3b4 <MIDI_RawOutByte+0xc6>
                        }
                        else
                        {
                                PlayMsg(midi.cmd_buf,midi.cmd_len);
                        }
                        midi.cmd_pos=1;         //Use Running status
     3c8:	81 e0       	ldi	r24, 0x01	; 1
     3ca:	90 e0       	ldi	r25, 0x00	; 0
     3cc:	90 93 27 02 	sts	0x0227, r25
     3d0:	80 93 26 02 	sts	0x0226, r24
		}
	}
}
     3d4:	df 91       	pop	r29
     3d6:	cf 91       	pop	r28
     3d8:	08 95       	ret
		PlayMsg(midi.rt_buf,1);
		return;
	}        
	/* Test for a active sysex tranfer */
	if (midi.status==0xf0) {
		if (!(data&0x80)) {
     3da:	87 fd       	sbrc	r24, 7
     3dc:	2e c0       	rjmp	.+92     	; 0x43a <MIDI_RawOutByte+0x14c>
                        /* SOFTMPU: Large sysex support */
                        /*if (midi.sysex.used<(SYSEX_SIZE-1))*/ midi.sysex.buf[midi.sysex.used++] = data;
     3de:	40 91 38 06 	lds	r20, 0x0638
     3e2:	50 91 39 06 	lds	r21, 0x0639
     3e6:	9a 01       	movw	r18, r20
     3e8:	2f 5f       	subi	r18, 0xFF	; 255
     3ea:	3f 4f       	sbci	r19, 0xFF	; 255
     3ec:	30 93 39 06 	sts	0x0639, r19
     3f0:	20 93 38 06 	sts	0x0638, r18
     3f4:	fa 01       	movw	r30, r20
     3f6:	ee 5d       	subi	r30, 0xDE	; 222
     3f8:	fd 4f       	sbci	r31, 0xFD	; 253
     3fa:	86 8b       	std	Z+22, r24	; 0x16

                        if (midi.sysex.used==SYSEX_SIZE)
     3fc:	21 15       	cp	r18, r1
     3fe:	34 40       	sbci	r19, 0x04	; 4
     400:	09 f0       	breq	.+2      	; 0x404 <MIDI_RawOutByte+0x116>
     402:	9f cf       	rjmp	.-194    	; 0x342 <MIDI_RawOutByte+0x54>
     404:	e8 e3       	ldi	r30, 0x38	; 56
     406:	f2 e0       	ldi	r31, 0x02	; 2
// extern QEMMInfo qemm;

static void PlayMsg(Bit8u* msg, Bitu len)
{
        for (Bitu i = 0; i < len; i++) {
			loop_until_bit_is_set(UCSR0A, UDRE0);	// wait for tx buffer to be empty
     408:	80 91 c0 00 	lds	r24, 0x00C0
     40c:	85 ff       	sbrs	r24, 5
     40e:	fc cf       	rjmp	.-8      	; 0x408 <MIDI_RawOutByte+0x11a>
			UDR0 = msg[i];							// output the next byte
     410:	81 91       	ld	r24, Z+
     412:	80 93 c6 00 	sts	0x00C6, r24
/* SOFTMPU: Initialised in mpu401.c */
// extern QEMMInfo qemm;

static void PlayMsg(Bit8u* msg, Bitu len)
{
        for (Bitu i = 0; i < len; i++) {
     416:	26 e0       	ldi	r18, 0x06	; 6
     418:	e8 33       	cpi	r30, 0x38	; 56
     41a:	f2 07       	cpc	r31, r18
     41c:	a9 f7       	brne	.-22     	; 0x408 <MIDI_RawOutByte+0x11a>
                        /*if (midi.sysex.used<(SYSEX_SIZE-1))*/ midi.sysex.buf[midi.sysex.used++] = data;

                        if (midi.sysex.used==SYSEX_SIZE)
                        {
                                PlayMsg(midi.sysex.buf, SYSEX_SIZE);
                                midi.sysex.used = 0;
     41e:	10 92 39 06 	sts	0x0639, r1
     422:	10 92 38 06 	sts	0x0638, r1
                                midi.sysex.usedbufs++;
     426:	80 91 3a 06 	lds	r24, 0x063A
     42a:	90 91 3b 06 	lds	r25, 0x063B
     42e:	01 96       	adiw	r24, 0x01	; 1
     430:	90 93 3b 06 	sts	0x063B, r25
     434:	80 93 3a 06 	sts	0x063A, r24
     438:	84 cf       	rjmp	.-248    	; 0x342 <MIDI_RawOutByte+0x54>
                        }
			return;
		} else {
			midi.sysex.buf[midi.sysex.used++] = 0xf7;
     43a:	e0 91 38 06 	lds	r30, 0x0638
     43e:	f0 91 39 06 	lds	r31, 0x0639
     442:	df 01       	movw	r26, r30
     444:	11 96       	adiw	r26, 0x01	; 1
     446:	b0 93 39 06 	sts	0x0639, r27
     44a:	a0 93 38 06 	sts	0x0638, r26
     44e:	9f 01       	movw	r18, r30
     450:	2e 5d       	subi	r18, 0xDE	; 222
     452:	3d 4f       	sbci	r19, 0xFD	; 253
     454:	97 ef       	ldi	r25, 0xF7	; 247
     456:	e9 01       	movw	r28, r18
     458:	9e 8b       	std	Y+22, r25	; 0x16

                        if ((midi.sysex.start) && (midi.sysex.usedbufs == 0) && (midi.sysex.used >= 4) && (midi.sysex.used <= 9) && (midi.sysex.buf[1] == 0x41) && (midi.sysex.buf[3] == 0x16)) {
     45a:	40 91 3e 06 	lds	r20, 0x063E
     45e:	50 91 3f 06 	lds	r21, 0x063F
     462:	60 91 40 06 	lds	r22, 0x0640
     466:	70 91 41 06 	lds	r23, 0x0641
     46a:	41 15       	cp	r20, r1
     46c:	51 05       	cpc	r21, r1
     46e:	61 05       	cpc	r22, r1
     470:	71 05       	cpc	r23, r1
     472:	71 f0       	breq	.+28     	; 0x490 <MIDI_RawOutByte+0x1a2>
     474:	c0 91 3a 06 	lds	r28, 0x063A
     478:	d0 91 3b 06 	lds	r29, 0x063B
     47c:	cd 2b       	or	r28, r29
     47e:	41 f4       	brne	.+16     	; 0x490 <MIDI_RawOutByte+0x1a2>
     480:	33 97       	sbiw	r30, 0x03	; 3
     482:	36 97       	sbiw	r30, 0x06	; 6
     484:	28 f4       	brcc	.+10     	; 0x490 <MIDI_RawOutByte+0x1a2>
     486:	90 91 39 02 	lds	r25, 0x0239
     48a:	91 34       	cpi	r25, 0x41	; 65
     48c:	09 f4       	brne	.+2      	; 0x490 <MIDI_RawOutByte+0x1a2>
     48e:	f4 c0       	rjmp	.+488    	; 0x678 <MIDI_RawOutByte+0x38a>
/* SOFTMPU: Initialised in mpu401.c */
// extern QEMMInfo qemm;

static void PlayMsg(Bit8u* msg, Bitu len)
{
        for (Bitu i = 0; i < len; i++) {
     490:	10 97       	sbiw	r26, 0x00	; 0
     492:	71 f0       	breq	.+28     	; 0x4b0 <MIDI_RawOutByte+0x1c2>
     494:	e8 e3       	ldi	r30, 0x38	; 56
     496:	f2 e0       	ldi	r31, 0x02	; 2
     498:	29 5e       	subi	r18, 0xE9	; 233
     49a:	3f 4f       	sbci	r19, 0xFF	; 255
			loop_until_bit_is_set(UCSR0A, UDRE0);	// wait for tx buffer to be empty
     49c:	90 91 c0 00 	lds	r25, 0x00C0
     4a0:	95 ff       	sbrs	r25, 5
     4a2:	fc cf       	rjmp	.-8      	; 0x49c <MIDI_RawOutByte+0x1ae>
			UDR0 = msg[i];							// output the next byte
     4a4:	91 91       	ld	r25, Z+
     4a6:	90 93 c6 00 	sts	0x00C6, r25
/* SOFTMPU: Initialised in mpu401.c */
// extern QEMMInfo qemm;

static void PlayMsg(Bit8u* msg, Bitu len)
{
        for (Bitu i = 0; i < len; i++) {
     4aa:	e2 17       	cp	r30, r18
     4ac:	f3 07       	cpc	r31, r19
     4ae:	b1 f7       	brne	.-20     	; 0x49c <MIDI_RawOutByte+0x1ae>
                        if ((midi.sysex.start) && (midi.sysex.usedbufs == 0) && (midi.sysex.used >= 4) && (midi.sysex.used <= 9) && (midi.sysex.buf[1] == 0x41) && (midi.sysex.buf[3] == 0x16)) {
				/*LOG(LOG_ALL,LOG_ERROR)("MIDI:Skipping invalid MT-32 SysEx midi message (too short to contain a checksum)");*/ /* SOFTMPU */
			} else {
				/*LOG(LOG_ALL,LOG_NORMAL)("Play sysex; address:%02X %02X %02X, length:%4d, delay:%3d", midi.sysex.buf[5], midi.sysex.buf[6], midi.sysex.buf[7], midi.sysex.used, midi.sysex.delay);*/
				PlayMsg(midi.sysex.buf, midi.sysex.used); /* SOFTMPU */
				if (midi.sysex.start) {
     4b0:	45 2b       	or	r20, r21
     4b2:	46 2b       	or	r20, r22
     4b4:	47 2b       	or	r20, r23
     4b6:	09 f1       	breq	.+66     	; 0x4fa <MIDI_RawOutByte+0x20c>
                                        if (midi.sysex.usedbufs == 0 && midi.sysex.buf[5] == 0x7F) {
     4b8:	20 91 3a 06 	lds	r18, 0x063A
     4bc:	30 91 3b 06 	lds	r19, 0x063B
     4c0:	21 15       	cp	r18, r1
     4c2:	31 05       	cpc	r19, r1
     4c4:	41 f4       	brne	.+16     	; 0x4d6 <MIDI_RawOutByte+0x1e8>
     4c6:	90 91 3d 02 	lds	r25, 0x023D
     4ca:	9f 37       	cpi	r25, 0x7F	; 127
     4cc:	09 f4       	brne	.+2      	; 0x4d0 <MIDI_RawOutByte+0x1e2>
     4ce:	cd c0       	rjmp	.+410    	; 0x66a <MIDI_RawOutByte+0x37c>
                                            /*midi.sysex.delay = 290;*/ /* SOFTMPU */ // All Parameters reset
                                            MIDI_sysex_delay = 290*(RTCFREQ/1000);
                                        } else if (midi.sysex.usedbufs == 0 && midi.sysex.buf[5] == 0x10 && midi.sysex.buf[6] == 0x00 && midi.sysex.buf[7] == 0x04) {
     4d0:	90 31       	cpi	r25, 0x10	; 16
     4d2:	09 f4       	brne	.+2      	; 0x4d6 <MIDI_RawOutByte+0x1e8>
     4d4:	b8 c0       	rjmp	.+368    	; 0x646 <MIDI_RawOutByte+0x358>
                                            /*midi.sysex.delay = 145;*/ /* SOFTMPU */ // Viking Child
                                            MIDI_sysex_delay = 145*(RTCFREQ/1000);
                                        } else if (midi.sysex.usedbufs == 0 && midi.sysex.buf[5] == 0x10 && midi.sysex.buf[6] == 0x00 && midi.sysex.buf[7] == 0x01) {
                                            /*midi.sysex.delay = 30;*/ /* SOFTMPU */ // Dark Sun 1
                                            MIDI_sysex_delay = 30*(RTCFREQ/1000);
                                        } else MIDI_sysex_delay = ((((midi.sysex.usedbufs*SYSEX_SIZE)+midi.sysex.used)/2)+2)*(RTCFREQ/1000); /*(Bitu)(((float)(midi.sysex.used) * 1.25f) * 1000.0f / 3125.0f) + 2;
     4d6:	32 2f       	mov	r19, r18
     4d8:	22 27       	eor	r18, r18
     4da:	33 0f       	add	r19, r19
     4dc:	33 0f       	add	r19, r19
     4de:	2a 0f       	add	r18, r26
     4e0:	3b 1f       	adc	r19, r27
     4e2:	36 95       	lsr	r19
     4e4:	27 95       	ror	r18
     4e6:	2e 5f       	subi	r18, 0xFE	; 254
     4e8:	3f 4f       	sbci	r19, 0xFF	; 255
     4ea:	22 0f       	add	r18, r18
     4ec:	33 1f       	adc	r19, r19
     4ee:	22 0f       	add	r18, r18
     4f0:	33 1f       	adc	r19, r19
     4f2:	30 93 1d 07 	sts	0x071D, r19
     4f6:	20 93 1c 07 	sts	0x071C, r18
				CAPTURE_AddMidi( true, midi.sysex.used-1, &midi.sysex.buf[1]);
			}*/ /* SOFTMPU */
		}
	}
	if (data&0x80) {
		midi.status=data;
     4fa:	28 2f       	mov	r18, r24
     4fc:	30 e0       	ldi	r19, 0x00	; 0
     4fe:	30 93 23 02 	sts	0x0223, r19
     502:	20 93 22 02 	sts	0x0222, r18
		midi.cmd_pos=0;
     506:	10 92 27 02 	sts	0x0227, r1
     50a:	10 92 26 02 	sts	0x0226, r1
		midi.cmd_len=MIDI_evt_len[data];
     50e:	f9 01       	movw	r30, r18
     510:	ee 5d       	subi	r30, 0xDE	; 222
     512:	fe 4f       	sbci	r31, 0xFE	; 254
     514:	40 81       	ld	r20, Z
     516:	50 e0       	ldi	r21, 0x00	; 0
     518:	50 93 25 02 	sts	0x0225, r21
     51c:	40 93 24 02 	sts	0x0224, r20
		if (midi.status==0xf0) {
     520:	20 3f       	cpi	r18, 0xF0	; 240
     522:	31 05       	cpc	r19, r1
     524:	09 f0       	breq	.+2      	; 0x528 <MIDI_RawOutByte+0x23a>
     526:	1e cf       	rjmp	.-452    	; 0x364 <MIDI_RawOutByte+0x76>
			midi.sysex.buf[0]=0xf0;
     528:	90 ef       	ldi	r25, 0xF0	; 240
     52a:	90 93 38 02 	sts	0x0238, r25
			midi.sysex.used=1;
     52e:	21 e0       	ldi	r18, 0x01	; 1
     530:	30 e0       	ldi	r19, 0x00	; 0
     532:	30 93 39 06 	sts	0x0639, r19
     536:	20 93 38 06 	sts	0x0638, r18
                        midi.sysex.usedbufs=0;
     53a:	10 92 3b 06 	sts	0x063B, r1
     53e:	10 92 3a 06 	sts	0x063A, r1
     542:	20 ef       	ldi	r18, 0xF0	; 240
     544:	30 e0       	ldi	r19, 0x00	; 0
     546:	0e cf       	rjmp	.-484    	; 0x364 <MIDI_RawOutByte+0x76>
     548:	e8 e2       	ldi	r30, 0x28	; 40
     54a:	f2 e0       	ldi	r31, 0x02	; 2
     54c:	48 5d       	subi	r20, 0xD8	; 216
     54e:	5d 4f       	sbci	r21, 0xFD	; 253
// extern QEMMInfo qemm;

static void PlayMsg(Bit8u* msg, Bitu len)
{
        for (Bitu i = 0; i < len; i++) {
			loop_until_bit_is_set(UCSR0A, UDRE0);	// wait for tx buffer to be empty
     550:	80 91 c0 00 	lds	r24, 0x00C0
     554:	85 ff       	sbrs	r24, 5
     556:	fc cf       	rjmp	.-8      	; 0x550 <MIDI_RawOutByte+0x262>
			UDR0 = msg[i];							// output the next byte
     558:	81 91       	ld	r24, Z+
     55a:	80 93 c6 00 	sts	0x00C6, r24
/* SOFTMPU: Initialised in mpu401.c */
// extern QEMMInfo qemm;

static void PlayMsg(Bit8u* msg, Bitu len)
{
        for (Bitu i = 0; i < len; i++) {
     55e:	e4 17       	cp	r30, r20
     560:	f5 07       	cpc	r31, r21
     562:	b1 f7       	brne	.-20     	; 0x550 <MIDI_RawOutByte+0x262>
     564:	31 cf       	rjmp	.-414    	; 0x3c8 <MIDI_RawOutByte+0xda>
                                        }

                                        PlayMsg(midi.cmd_buf,midi.cmd_len);
                                }
                                /* SOFTMPU: Test for "All Notes Off" */
                                else if (((midi.status&0xf0)==0xb0) &&
     566:	80 91 29 02 	lds	r24, 0x0229
     56a:	8b 57       	subi	r24, 0x7B	; 123
     56c:	85 30       	cpi	r24, 0x05	; 5
     56e:	08 f0       	brcs	.+2      	; 0x572 <MIDI_RawOutByte+0x284>
     570:	1d cf       	rjmp	.-454    	; 0x3ac <MIDI_RawOutByte+0xbe>
                                         (midi.cmd_buf[1]>=0x7b) &&
                                         (midi.cmd_buf[1]<=0x7f))
                                {
                                        FakeAllNotesOff(midi.status&0x0f);
     572:	2f 70       	andi	r18, 0x0F	; 15
     574:	33 27       	eor	r19, r19
static void FakeAllNotesOff(Bitu chan)
{
        Bitu note;
        channel* pChan;

        MIDI_note_off[0] &= 0xf0;
     576:	80 91 00 01 	lds	r24, 0x0100
     57a:	80 7f       	andi	r24, 0xF0	; 240
        MIDI_note_off[0] |= (Bit8u)chan;
     57c:	82 2b       	or	r24, r18
     57e:	80 93 00 01 	sts	0x0100, r24

        pChan=&tracked_channels[chan];
     582:	f9 01       	movw	r30, r18
     584:	ee 0f       	add	r30, r30
     586:	ff 1f       	adc	r31, r31
     588:	22 0f       	add	r18, r18
     58a:	33 1f       	adc	r19, r19
     58c:	22 0f       	add	r18, r18
     58e:	33 1f       	adc	r19, r19
     590:	22 0f       	add	r18, r18
     592:	33 1f       	adc	r19, r19
     594:	e2 0f       	add	r30, r18
     596:	f3 1f       	adc	r31, r19
     598:	e2 5e       	subi	r30, 0xE2	; 226
     59a:	f8 4f       	sbci	r31, 0xF8	; 248

        for (note=0;note<pChan->used;note++)
     59c:	80 81       	ld	r24, Z
     59e:	88 23       	and	r24, r24
     5a0:	d1 f0       	breq	.+52     	; 0x5d6 <MIDI_RawOutByte+0x2e8>
     5a2:	ef 01       	movw	r28, r30
     5a4:	22 96       	adiw	r28, 0x02	; 2
     5a6:	80 e0       	ldi	r24, 0x00	; 0
     5a8:	90 e0       	ldi	r25, 0x00	; 0
        {
                MIDI_note_off[1]=pChan->notes[note];
     5aa:	49 91       	ld	r20, Y+
     5ac:	40 93 01 01 	sts	0x0101, r20
     5b0:	a0 e0       	ldi	r26, 0x00	; 0
     5b2:	b1 e0       	ldi	r27, 0x01	; 1
// extern QEMMInfo qemm;

static void PlayMsg(Bit8u* msg, Bitu len)
{
        for (Bitu i = 0; i < len; i++) {
			loop_until_bit_is_set(UCSR0A, UDRE0);	// wait for tx buffer to be empty
     5b4:	40 91 c0 00 	lds	r20, 0x00C0
     5b8:	45 ff       	sbrs	r20, 5
     5ba:	fc cf       	rjmp	.-8      	; 0x5b4 <MIDI_RawOutByte+0x2c6>
			UDR0 = msg[i];							// output the next byte
     5bc:	4d 91       	ld	r20, X+
     5be:	40 93 c6 00 	sts	0x00C6, r20
/* SOFTMPU: Initialised in mpu401.c */
// extern QEMMInfo qemm;

static void PlayMsg(Bit8u* msg, Bitu len)
{
        for (Bitu i = 0; i < len; i++) {
     5c2:	21 e0       	ldi	r18, 0x01	; 1
     5c4:	a3 30       	cpi	r26, 0x03	; 3
     5c6:	b2 07       	cpc	r27, r18
     5c8:	a9 f7       	brne	.-22     	; 0x5b4 <MIDI_RawOutByte+0x2c6>
        MIDI_note_off[0] &= 0xf0;
        MIDI_note_off[0] |= (Bit8u)chan;

        pChan=&tracked_channels[chan];

        for (note=0;note<pChan->used;note++)
     5ca:	01 96       	adiw	r24, 0x01	; 1
     5cc:	40 81       	ld	r20, Z
     5ce:	50 e0       	ldi	r21, 0x00	; 0
     5d0:	84 17       	cp	r24, r20
     5d2:	95 07       	cpc	r25, r21
     5d4:	50 f3       	brcs	.-44     	; 0x5aa <MIDI_RawOutByte+0x2bc>
        {
                MIDI_note_off[1]=pChan->notes[note];
                PlayMsg(MIDI_note_off,3);
        }

        pChan->used=0;
     5d6:	10 82       	st	Z, r1
        pChan->next=0;
     5d8:	11 82       	std	Z+1, r1	; 0x01
     5da:	f6 ce       	rjmp	.-532    	; 0x3c8 <MIDI_RawOutByte+0xda>
                        if (midi.fakeallnotesoff)
                        {
                                /* SOFTMPU: Test for "Note On" */
                                if ((midi.status&0xf0)==0x90)
                                {
                                        if (midi.cmd_buf[2]>0)
     5dc:	80 91 2a 02 	lds	r24, 0x022A
     5e0:	88 23       	and	r24, r24
     5e2:	11 f1       	breq	.+68     	; 0x628 <MIDI_RawOutByte+0x33a>
                                        {
                                                pChan=&tracked_channels[midi.status&0x0f];
     5e4:	2f 70       	andi	r18, 0x0F	; 15
     5e6:	33 27       	eor	r19, r19
     5e8:	f9 01       	movw	r30, r18
     5ea:	ee 0f       	add	r30, r30
     5ec:	ff 1f       	adc	r31, r31
     5ee:	22 0f       	add	r18, r18
     5f0:	33 1f       	adc	r19, r19
     5f2:	22 0f       	add	r18, r18
     5f4:	33 1f       	adc	r19, r19
     5f6:	22 0f       	add	r18, r18
     5f8:	33 1f       	adc	r19, r19
     5fa:	e2 0f       	add	r30, r18
     5fc:	f3 1f       	adc	r31, r19
     5fe:	e2 5e       	subi	r30, 0xE2	; 226
     600:	f8 4f       	sbci	r31, 0xF8	; 248
                                                pChan->notes[pChan->next++]=midi.cmd_buf[1];
     602:	91 81       	ldd	r25, Z+1	; 0x01
     604:	81 e0       	ldi	r24, 0x01	; 1
     606:	89 0f       	add	r24, r25
     608:	81 83       	std	Z+1, r24	; 0x01
     60a:	df 01       	movw	r26, r30
     60c:	a9 0f       	add	r26, r25
     60e:	b1 1d       	adc	r27, r1
     610:	90 91 29 02 	lds	r25, 0x0229
     614:	12 96       	adiw	r26, 0x02	; 2
     616:	9c 93       	st	X, r25
                                                if (pChan->next==MAX_TRACKED_NOTES) pChan->next=0;
     618:	88 30       	cpi	r24, 0x08	; 8
     61a:	09 f4       	brne	.+2      	; 0x61e <MIDI_RawOutByte+0x330>
     61c:	11 82       	std	Z+1, r1	; 0x01
                                                if (pChan->used<MAX_TRACKED_NOTES) pChan->used++;
     61e:	80 81       	ld	r24, Z
     620:	88 30       	cpi	r24, 0x08	; 8
     622:	10 f4       	brcc	.+4      	; 0x628 <MIDI_RawOutByte+0x33a>
     624:	8f 5f       	subi	r24, 0xFF	; 255
     626:	80 83       	st	Z, r24
     628:	e8 e2       	ldi	r30, 0x28	; 40
     62a:	f2 e0       	ldi	r31, 0x02	; 2
     62c:	48 5d       	subi	r20, 0xD8	; 216
     62e:	5d 4f       	sbci	r21, 0xFD	; 253
// extern QEMMInfo qemm;

static void PlayMsg(Bit8u* msg, Bitu len)
{
        for (Bitu i = 0; i < len; i++) {
			loop_until_bit_is_set(UCSR0A, UDRE0);	// wait for tx buffer to be empty
     630:	80 91 c0 00 	lds	r24, 0x00C0
     634:	85 ff       	sbrs	r24, 5
     636:	fc cf       	rjmp	.-8      	; 0x630 <MIDI_RawOutByte+0x342>
			UDR0 = msg[i];							// output the next byte
     638:	81 91       	ld	r24, Z+
     63a:	80 93 c6 00 	sts	0x00C6, r24
/* SOFTMPU: Initialised in mpu401.c */
// extern QEMMInfo qemm;

static void PlayMsg(Bit8u* msg, Bitu len)
{
        for (Bitu i = 0; i < len; i++) {
     63e:	e4 17       	cp	r30, r20
     640:	f5 07       	cpc	r31, r21
     642:	b1 f7       	brne	.-20     	; 0x630 <MIDI_RawOutByte+0x342>
     644:	c1 ce       	rjmp	.-638    	; 0x3c8 <MIDI_RawOutByte+0xda>
				PlayMsg(midi.sysex.buf, midi.sysex.used); /* SOFTMPU */
				if (midi.sysex.start) {
                                        if (midi.sysex.usedbufs == 0 && midi.sysex.buf[5] == 0x7F) {
                                            /*midi.sysex.delay = 290;*/ /* SOFTMPU */ // All Parameters reset
                                            MIDI_sysex_delay = 290*(RTCFREQ/1000);
                                        } else if (midi.sysex.usedbufs == 0 && midi.sysex.buf[5] == 0x10 && midi.sysex.buf[6] == 0x00 && midi.sysex.buf[7] == 0x04) {
     646:	90 91 3e 02 	lds	r25, 0x023E
     64a:	91 11       	cpse	r25, r1
     64c:	44 cf       	rjmp	.-376    	; 0x4d6 <MIDI_RawOutByte+0x1e8>
     64e:	90 91 3f 02 	lds	r25, 0x023F
     652:	94 30       	cpi	r25, 0x04	; 4
     654:	b9 f0       	breq	.+46     	; 0x684 <MIDI_RawOutByte+0x396>
                                            /*midi.sysex.delay = 145;*/ /* SOFTMPU */ // Viking Child
                                            MIDI_sysex_delay = 145*(RTCFREQ/1000);
                                        } else if (midi.sysex.usedbufs == 0 && midi.sysex.buf[5] == 0x10 && midi.sysex.buf[6] == 0x00 && midi.sysex.buf[7] == 0x01) {
     656:	91 30       	cpi	r25, 0x01	; 1
     658:	09 f0       	breq	.+2      	; 0x65c <MIDI_RawOutByte+0x36e>
     65a:	3d cf       	rjmp	.-390    	; 0x4d6 <MIDI_RawOutByte+0x1e8>
                                            /*midi.sysex.delay = 30;*/ /* SOFTMPU */ // Dark Sun 1
                                            MIDI_sysex_delay = 30*(RTCFREQ/1000);
     65c:	28 e7       	ldi	r18, 0x78	; 120
     65e:	30 e0       	ldi	r19, 0x00	; 0
     660:	30 93 1d 07 	sts	0x071D, r19
     664:	20 93 1c 07 	sts	0x071C, r18
     668:	48 cf       	rjmp	.-368    	; 0x4fa <MIDI_RawOutByte+0x20c>
				/*LOG(LOG_ALL,LOG_NORMAL)("Play sysex; address:%02X %02X %02X, length:%4d, delay:%3d", midi.sysex.buf[5], midi.sysex.buf[6], midi.sysex.buf[7], midi.sysex.used, midi.sysex.delay);*/
				PlayMsg(midi.sysex.buf, midi.sysex.used); /* SOFTMPU */
				if (midi.sysex.start) {
                                        if (midi.sysex.usedbufs == 0 && midi.sysex.buf[5] == 0x7F) {
                                            /*midi.sysex.delay = 290;*/ /* SOFTMPU */ // All Parameters reset
                                            MIDI_sysex_delay = 290*(RTCFREQ/1000);
     66a:	28 e8       	ldi	r18, 0x88	; 136
     66c:	34 e0       	ldi	r19, 0x04	; 4
     66e:	30 93 1d 07 	sts	0x071D, r19
     672:	20 93 1c 07 	sts	0x071C, r18
     676:	41 cf       	rjmp	.-382    	; 0x4fa <MIDI_RawOutByte+0x20c>
                        }
			return;
		} else {
			midi.sysex.buf[midi.sysex.used++] = 0xf7;

                        if ((midi.sysex.start) && (midi.sysex.usedbufs == 0) && (midi.sysex.used >= 4) && (midi.sysex.used <= 9) && (midi.sysex.buf[1] == 0x41) && (midi.sysex.buf[3] == 0x16)) {
     678:	90 91 3b 02 	lds	r25, 0x023B
     67c:	96 31       	cpi	r25, 0x16	; 22
     67e:	09 f0       	breq	.+2      	; 0x682 <MIDI_RawOutByte+0x394>
     680:	07 cf       	rjmp	.-498    	; 0x490 <MIDI_RawOutByte+0x1a2>
     682:	3b cf       	rjmp	.-394    	; 0x4fa <MIDI_RawOutByte+0x20c>
                                        if (midi.sysex.usedbufs == 0 && midi.sysex.buf[5] == 0x7F) {
                                            /*midi.sysex.delay = 290;*/ /* SOFTMPU */ // All Parameters reset
                                            MIDI_sysex_delay = 290*(RTCFREQ/1000);
                                        } else if (midi.sysex.usedbufs == 0 && midi.sysex.buf[5] == 0x10 && midi.sysex.buf[6] == 0x00 && midi.sysex.buf[7] == 0x04) {
                                            /*midi.sysex.delay = 145;*/ /* SOFTMPU */ // Viking Child
                                            MIDI_sysex_delay = 145*(RTCFREQ/1000);
     684:	24 e4       	ldi	r18, 0x44	; 68
     686:	32 e0       	ldi	r19, 0x02	; 2
     688:	30 93 1d 07 	sts	0x071D, r19
     68c:	20 93 1c 07 	sts	0x071C, r18
     690:	34 cf       	rjmp	.-408    	; 0x4fa <MIDI_RawOutByte+0x20c>

00000692 <MIDI_Available>:
	}
}

bool MIDI_Available(void)  {
	return midi.available;
}
     692:	80 91 43 06 	lds	r24, 0x0643
     696:	08 95       	ret

00000698 <MIDI_Init>:

/* SOFTMPU: Initialisation */
void MIDI_Init(bool delaysysex,bool fakeallnotesoff){
     698:	cf 93       	push	r28
     69a:	df 93       	push	r29
        Bitu i; /* SOFTMPU */
	midi.sysex.delay = 0;
     69c:	10 92 3d 06 	sts	0x063D, r1
     6a0:	10 92 3c 06 	sts	0x063C, r1
	midi.sysex.start = 0;
     6a4:	10 92 3e 06 	sts	0x063E, r1
     6a8:	10 92 3f 06 	sts	0x063F, r1
     6ac:	10 92 40 06 	sts	0x0640, r1
     6b0:	10 92 41 06 	sts	0x0641, r1
	MIDI_sysex_delay = 0; /* SOFTMPU */
     6b4:	10 92 1d 07 	sts	0x071D, r1
     6b8:	10 92 1c 07 	sts	0x071C, r1

        if (delaysysex==true)
     6bc:	81 30       	cpi	r24, 0x01	; 1
     6be:	09 f4       	brne	.+2      	; 0x6c2 <MIDI_Init+0x2a>
     6c0:	5c c0       	rjmp	.+184    	; 0x77a <MIDI_Init+0xe2>
	{
		midi.sysex.start = 1; /*GetTicks();*/ /* SOFTMPU */
		/*LOG_MSG("MIDI:Using delayed SysEx processing");*/ /* SOFTMPU */
	}
	midi.status=0x00;
     6c2:	10 92 23 02 	sts	0x0223, r1
     6c6:	10 92 22 02 	sts	0x0222, r1
	midi.cmd_pos=0;
     6ca:	10 92 27 02 	sts	0x0227, r1
     6ce:	10 92 26 02 	sts	0x0226, r1
	midi.cmd_len=0;
     6d2:	10 92 25 02 	sts	0x0225, r1
     6d6:	10 92 24 02 	sts	0x0224, r1
        midi.fakeallnotesoff=fakeallnotesoff;
     6da:	60 93 42 06 	sts	0x0642, r22
        midi.available=true;
     6de:	81 e0       	ldi	r24, 0x01	; 1
     6e0:	80 93 43 06 	sts	0x0643, r24
     6e4:	c3 e0       	ldi	r28, 0x03	; 3
     6e6:	d1 e0       	ldi	r29, 0x01	; 1

        /* SOFTMPU: Display welcome message on MT-32 */
        for (i=0;i<30;i++)
        {
                MIDI_RawOutByte(MIDI_welcome_msg[i]);
     6e8:	89 91       	ld	r24, Y+
     6ea:	01 de       	rcall	.-1022   	; 0x2ee <MIDI_RawOutByte>
	midi.cmd_len=0;
        midi.fakeallnotesoff=fakeallnotesoff;
        midi.available=true;

        /* SOFTMPU: Display welcome message on MT-32 */
        for (i=0;i<30;i++)
     6ec:	81 e0       	ldi	r24, 0x01	; 1
     6ee:	c1 32       	cpi	r28, 0x21	; 33
     6f0:	d8 07       	cpc	r29, r24
     6f2:	d1 f7       	brne	.-12     	; 0x6e8 <MIDI_Init+0x50>
        }

        /* SOFTMPU: Init note tracking */
        for (i=0;i<MAX_TRACKED_CHANNELS;i++)
        {
                tracked_channels[i].used=0;
     6f4:	10 92 1e 07 	sts	0x071E, r1
                tracked_channels[i].next=0;
     6f8:	10 92 1f 07 	sts	0x071F, r1
        }

        /* SOFTMPU: Init note tracking */
        for (i=0;i<MAX_TRACKED_CHANNELS;i++)
        {
                tracked_channels[i].used=0;
     6fc:	10 92 28 07 	sts	0x0728, r1
                tracked_channels[i].next=0;
     700:	10 92 29 07 	sts	0x0729, r1
        }

        /* SOFTMPU: Init note tracking */
        for (i=0;i<MAX_TRACKED_CHANNELS;i++)
        {
                tracked_channels[i].used=0;
     704:	10 92 32 07 	sts	0x0732, r1
                tracked_channels[i].next=0;
     708:	10 92 33 07 	sts	0x0733, r1
        }

        /* SOFTMPU: Init note tracking */
        for (i=0;i<MAX_TRACKED_CHANNELS;i++)
        {
                tracked_channels[i].used=0;
     70c:	10 92 3c 07 	sts	0x073C, r1
                tracked_channels[i].next=0;
     710:	10 92 3d 07 	sts	0x073D, r1
        }

        /* SOFTMPU: Init note tracking */
        for (i=0;i<MAX_TRACKED_CHANNELS;i++)
        {
                tracked_channels[i].used=0;
     714:	10 92 46 07 	sts	0x0746, r1
                tracked_channels[i].next=0;
     718:	10 92 47 07 	sts	0x0747, r1
        }

        /* SOFTMPU: Init note tracking */
        for (i=0;i<MAX_TRACKED_CHANNELS;i++)
        {
                tracked_channels[i].used=0;
     71c:	10 92 50 07 	sts	0x0750, r1
                tracked_channels[i].next=0;
     720:	10 92 51 07 	sts	0x0751, r1
        }

        /* SOFTMPU: Init note tracking */
        for (i=0;i<MAX_TRACKED_CHANNELS;i++)
        {
                tracked_channels[i].used=0;
     724:	10 92 5a 07 	sts	0x075A, r1
                tracked_channels[i].next=0;
     728:	10 92 5b 07 	sts	0x075B, r1
        }

        /* SOFTMPU: Init note tracking */
        for (i=0;i<MAX_TRACKED_CHANNELS;i++)
        {
                tracked_channels[i].used=0;
     72c:	10 92 64 07 	sts	0x0764, r1
                tracked_channels[i].next=0;
     730:	10 92 65 07 	sts	0x0765, r1
        }

        /* SOFTMPU: Init note tracking */
        for (i=0;i<MAX_TRACKED_CHANNELS;i++)
        {
                tracked_channels[i].used=0;
     734:	10 92 6e 07 	sts	0x076E, r1
                tracked_channels[i].next=0;
     738:	10 92 6f 07 	sts	0x076F, r1
        }

        /* SOFTMPU: Init note tracking */
        for (i=0;i<MAX_TRACKED_CHANNELS;i++)
        {
                tracked_channels[i].used=0;
     73c:	10 92 78 07 	sts	0x0778, r1
                tracked_channels[i].next=0;
     740:	10 92 79 07 	sts	0x0779, r1
        }

        /* SOFTMPU: Init note tracking */
        for (i=0;i<MAX_TRACKED_CHANNELS;i++)
        {
                tracked_channels[i].used=0;
     744:	10 92 82 07 	sts	0x0782, r1
                tracked_channels[i].next=0;
     748:	10 92 83 07 	sts	0x0783, r1
        }

        /* SOFTMPU: Init note tracking */
        for (i=0;i<MAX_TRACKED_CHANNELS;i++)
        {
                tracked_channels[i].used=0;
     74c:	10 92 8c 07 	sts	0x078C, r1
                tracked_channels[i].next=0;
     750:	10 92 8d 07 	sts	0x078D, r1
        }

        /* SOFTMPU: Init note tracking */
        for (i=0;i<MAX_TRACKED_CHANNELS;i++)
        {
                tracked_channels[i].used=0;
     754:	10 92 96 07 	sts	0x0796, r1
                tracked_channels[i].next=0;
     758:	10 92 97 07 	sts	0x0797, r1
        }

        /* SOFTMPU: Init note tracking */
        for (i=0;i<MAX_TRACKED_CHANNELS;i++)
        {
                tracked_channels[i].used=0;
     75c:	10 92 a0 07 	sts	0x07A0, r1
                tracked_channels[i].next=0;
     760:	10 92 a1 07 	sts	0x07A1, r1
        }

        /* SOFTMPU: Init note tracking */
        for (i=0;i<MAX_TRACKED_CHANNELS;i++)
        {
                tracked_channels[i].used=0;
     764:	10 92 aa 07 	sts	0x07AA, r1
                tracked_channels[i].next=0;
     768:	10 92 ab 07 	sts	0x07AB, r1
        }

        /* SOFTMPU: Init note tracking */
        for (i=0;i<MAX_TRACKED_CHANNELS;i++)
        {
                tracked_channels[i].used=0;
     76c:	10 92 b4 07 	sts	0x07B4, r1
                tracked_channels[i].next=0;
     770:	10 92 b5 07 	sts	0x07B5, r1
        }
}
     774:	df 91       	pop	r29
     776:	cf 91       	pop	r28
     778:	08 95       	ret
	midi.sysex.start = 0;
	MIDI_sysex_delay = 0; /* SOFTMPU */

        if (delaysysex==true)
	{
		midi.sysex.start = 1; /*GetTicks();*/ /* SOFTMPU */
     77a:	81 e0       	ldi	r24, 0x01	; 1
     77c:	90 e0       	ldi	r25, 0x00	; 0
     77e:	a0 e0       	ldi	r26, 0x00	; 0
     780:	b0 e0       	ldi	r27, 0x00	; 0
     782:	80 93 3e 06 	sts	0x063E, r24
     786:	90 93 3f 06 	sts	0x063F, r25
     78a:	a0 93 40 06 	sts	0x0640, r26
     78e:	b0 93 41 06 	sts	0x0641, r27
     792:	97 cf       	rjmp	.-210    	; 0x6c2 <MIDI_Init+0x2a>

00000794 <MPU401_Reset>:
}

/* SOFTMPU: Enable/disable MPU version fix for Gateway */
void MPU401_SetEnableMPUVerFix(bool enable)
{
        mpu.mpu_ver_fix=enable;
     794:	81 e0       	ldi	r24, 0x01	; 1
     796:	90 91 4a 06 	lds	r25, 0x064A
     79a:	91 11       	cpse	r25, r1
     79c:	01 c0       	rjmp	.+2      	; 0x7a0 <MPU401_Reset+0xc>
     79e:	80 e0       	ldi	r24, 0x00	; 0
     7a0:	80 93 4c 06 	sts	0x064C, r24
     7a4:	82 e0       	ldi	r24, 0x02	; 2
     7a6:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <PIC_RemoveEvents>
     7aa:	10 92 fb 06 	sts	0x06FB, r1
     7ae:	10 92 f5 06 	sts	0x06F5, r1
     7b2:	10 92 f6 06 	sts	0x06F6, r1
     7b6:	10 92 ef 06 	sts	0x06EF, r1
     7ba:	10 92 f0 06 	sts	0x06F0, r1
     7be:	10 92 f1 06 	sts	0x06F1, r1
     7c2:	10 92 f3 06 	sts	0x06F3, r1
     7c6:	10 92 f8 06 	sts	0x06F8, r1
     7ca:	10 92 f9 06 	sts	0x06F9, r1
     7ce:	8f ef       	ldi	r24, 0xFF	; 255
     7d0:	80 93 03 07 	sts	0x0703, r24
     7d4:	10 92 02 07 	sts	0x0702, r1
     7d8:	10 92 04 07 	sts	0x0704, r1
     7dc:	8f ef       	ldi	r24, 0xFF	; 255
     7de:	9f ef       	ldi	r25, 0xFF	; 255
     7e0:	90 93 06 07 	sts	0x0706, r25
     7e4:	80 93 05 07 	sts	0x0705, r24
     7e8:	10 92 fd 06 	sts	0x06FD, r1
     7ec:	10 92 fc 06 	sts	0x06FC, r1
     7f0:	10 92 ff 06 	sts	0x06FF, r1
     7f4:	10 92 fe 06 	sts	0x06FE, r1
     7f8:	10 92 f2 06 	sts	0x06F2, r1
     7fc:	84 e6       	ldi	r24, 0x64	; 100
     7fe:	80 93 0e 07 	sts	0x070E, r24
     802:	80 93 0d 07 	sts	0x070D, r24
     806:	8e e1       	ldi	r24, 0x1E	; 30
     808:	80 93 0c 07 	sts	0x070C, r24
     80c:	80 93 0b 07 	sts	0x070B, r24
     810:	88 e2       	ldi	r24, 0x28	; 40
     812:	80 93 10 07 	sts	0x0710, r24
     816:	80 93 0f 07 	sts	0x070F, r24
     81a:	10 92 11 07 	sts	0x0711, r1
     81e:	10 92 14 07 	sts	0x0714, r1
     822:	8c e3       	ldi	r24, 0x3C	; 60
     824:	80 93 12 07 	sts	0x0712, r24
     828:	10 92 13 07 	sts	0x0713, r1
     82c:	10 92 70 06 	sts	0x0670, r1
     830:	10 92 6f 06 	sts	0x066F, r1
     834:	10 92 6e 06 	sts	0x066E, r1
     838:	10 92 6d 06 	sts	0x066D, r1
     83c:	10 92 08 07 	sts	0x0708, r1
     840:	10 92 07 07 	sts	0x0707, r1
     844:	10 92 e2 06 	sts	0x06E2, r1
     848:	10 92 e1 06 	sts	0x06E1, r1
     84c:	10 92 ee 06 	sts	0x06EE, r1
     850:	10 92 7e 06 	sts	0x067E, r1
     854:	10 92 72 06 	sts	0x0672, r1
     858:	10 92 71 06 	sts	0x0671, r1
     85c:	10 92 8c 06 	sts	0x068C, r1
     860:	10 92 80 06 	sts	0x0680, r1
     864:	10 92 7f 06 	sts	0x067F, r1
     868:	10 92 9a 06 	sts	0x069A, r1
     86c:	10 92 8e 06 	sts	0x068E, r1
     870:	10 92 8d 06 	sts	0x068D, r1
     874:	10 92 a8 06 	sts	0x06A8, r1
     878:	10 92 9c 06 	sts	0x069C, r1
     87c:	10 92 9b 06 	sts	0x069B, r1
     880:	10 92 b6 06 	sts	0x06B6, r1
     884:	10 92 aa 06 	sts	0x06AA, r1
     888:	10 92 a9 06 	sts	0x06A9, r1
     88c:	10 92 c4 06 	sts	0x06C4, r1
     890:	10 92 b8 06 	sts	0x06B8, r1
     894:	10 92 b7 06 	sts	0x06B7, r1
     898:	10 92 d2 06 	sts	0x06D2, r1
     89c:	10 92 c6 06 	sts	0x06C6, r1
     8a0:	10 92 c5 06 	sts	0x06C5, r1
     8a4:	10 92 e0 06 	sts	0x06E0, r1
     8a8:	10 92 d4 06 	sts	0x06D4, r1
     8ac:	10 92 d3 06 	sts	0x06D3, r1
     8b0:	08 95       	ret

000008b2 <QueueByte.part.0>:
     8b2:	20 91 6f 06 	lds	r18, 0x066F
     8b6:	30 91 70 06 	lds	r19, 0x0670
     8ba:	20 32       	cpi	r18, 0x20	; 32
     8bc:	31 05       	cpc	r19, r1
     8be:	f8 f4       	brcc	.+62     	; 0x8fe <QueueByte.part.0+0x4c>
     8c0:	60 91 6d 06 	lds	r22, 0x066D
     8c4:	70 91 6e 06 	lds	r23, 0x066E
     8c8:	ab 01       	movw	r20, r22
     8ca:	42 0f       	add	r20, r18
     8cc:	53 1f       	adc	r21, r19
     8ce:	60 32       	cpi	r22, 0x20	; 32
     8d0:	71 05       	cpc	r23, r1
     8d2:	30 f0       	brcs	.+12     	; 0x8e0 <QueueByte.part.0+0x2e>
     8d4:	60 52       	subi	r22, 0x20	; 32
     8d6:	71 09       	sbc	r23, r1
     8d8:	70 93 6e 06 	sts	0x066E, r23
     8dc:	60 93 6d 06 	sts	0x066D, r22
     8e0:	40 32       	cpi	r20, 0x20	; 32
     8e2:	51 05       	cpc	r21, r1
     8e4:	10 f0       	brcs	.+4      	; 0x8ea <QueueByte.part.0+0x38>
     8e6:	40 52       	subi	r20, 0x20	; 32
     8e8:	51 09       	sbc	r21, r1
     8ea:	2f 5f       	subi	r18, 0xFF	; 255
     8ec:	3f 4f       	sbci	r19, 0xFF	; 255
     8ee:	30 93 70 06 	sts	0x0670, r19
     8f2:	20 93 6f 06 	sts	0x066F, r18
     8f6:	fa 01       	movw	r30, r20
     8f8:	e6 5b       	subi	r30, 0xB6	; 182
     8fa:	f9 4f       	sbci	r31, 0xF9	; 249
     8fc:	83 83       	std	Z+3, r24	; 0x03
     8fe:	08 95       	ret

00000900 <UpdateTrack>:
     900:	bf 92       	push	r11
     902:	cf 92       	push	r12
     904:	df 92       	push	r13
     906:	ef 92       	push	r14
     908:	ff 92       	push	r15
     90a:	0f 93       	push	r16
     90c:	1f 93       	push	r17
     90e:	cf 93       	push	r28
     910:	df 93       	push	r29
     912:	b8 2e       	mov	r11, r24
     914:	08 2f       	mov	r16, r24
     916:	10 e0       	ldi	r17, 0x00	; 0
     918:	00 0f       	add	r16, r16
     91a:	11 1f       	adc	r17, r17
     91c:	98 01       	movw	r18, r16
     91e:	22 0f       	add	r18, r18
     920:	33 1f       	adc	r19, r19
     922:	22 0f       	add	r18, r18
     924:	33 1f       	adc	r19, r19
     926:	22 0f       	add	r18, r18
     928:	33 1f       	adc	r19, r19
     92a:	20 1b       	sub	r18, r16
     92c:	31 0b       	sbc	r19, r17
     92e:	f9 01       	movw	r30, r18
     930:	e6 5b       	subi	r30, 0xB6	; 182
     932:	f9 4f       	sbci	r31, 0xF9	; 249
     934:	84 a9       	ldd	r24, Z+52	; 0x34
     936:	81 30       	cpi	r24, 0x01	; 1
     938:	09 f4       	brne	.+2      	; 0x93c <UpdateTrack+0x3c>
     93a:	62 c0       	rjmp	.+196    	; 0xa00 <UpdateTrack+0x100>
     93c:	83 30       	cpi	r24, 0x03	; 3
     93e:	c1 f4       	brne	.+48     	; 0x970 <UpdateTrack+0x70>
     940:	82 a9       	ldd	r24, Z+50	; 0x32
     942:	88 23       	and	r24, r24
     944:	a9 f0       	breq	.+42     	; 0x970 <UpdateTrack+0x70>
     946:	c9 01       	movw	r24, r18
     948:	8d 58       	subi	r24, 0x8D	; 141
     94a:	99 4f       	sbci	r25, 0xF9	; 249
     94c:	7c 01       	movw	r14, r24
     94e:	c0 e0       	ldi	r28, 0x00	; 0
     950:	d0 e0       	ldi	r29, 0x00	; 0
     952:	6f 01       	movw	r12, r30
     954:	92 e3       	ldi	r25, 0x32	; 50
     956:	c9 0e       	add	r12, r25
     958:	d1 1c       	adc	r13, r1
     95a:	f7 01       	movw	r30, r14
     95c:	81 91       	ld	r24, Z+
     95e:	7f 01       	movw	r14, r30
     960:	c6 dc       	rcall	.-1652   	; 0x2ee <MIDI_RawOutByte>
     962:	21 96       	adiw	r28, 0x01	; 1
     964:	f6 01       	movw	r30, r12
     966:	20 81       	ld	r18, Z
     968:	30 e0       	ldi	r19, 0x00	; 0
     96a:	c2 17       	cp	r28, r18
     96c:	d3 07       	cpc	r29, r19
     96e:	a8 f3       	brcs	.-22     	; 0x95a <UpdateTrack+0x5a>
     970:	80 91 04 07 	lds	r24, 0x0704
     974:	28 2f       	mov	r18, r24
     976:	30 e0       	ldi	r19, 0x00	; 0
     978:	0b 2c       	mov	r0, r11
     97a:	02 c0       	rjmp	.+4      	; 0x980 <UpdateTrack+0x80>
     97c:	35 95       	asr	r19
     97e:	27 95       	ror	r18
     980:	0a 94       	dec	r0
     982:	e2 f7       	brpl	.-8      	; 0x97c <UpdateTrack+0x7c>
     984:	20 fd       	sbrc	r18, 0
     986:	19 c0       	rjmp	.+50     	; 0x9ba <UpdateTrack+0xba>
     988:	81 11       	cpse	r24, r1
     98a:	0d c0       	rjmp	.+26     	; 0x9a6 <UpdateTrack+0xa6>
     98c:	80 91 ef 06 	lds	r24, 0x06EF
     990:	81 11       	cpse	r24, r1
     992:	09 c0       	rjmp	.+18     	; 0x9a6 <UpdateTrack+0xa6>
     994:	80 91 07 07 	lds	r24, 0x0707
     998:	90 91 08 07 	lds	r25, 0x0708
     99c:	90 61       	ori	r25, 0x10	; 16
     99e:	90 93 08 07 	sts	0x0708, r25
     9a2:	80 93 07 07 	sts	0x0707, r24
     9a6:	df 91       	pop	r29
     9a8:	cf 91       	pop	r28
     9aa:	1f 91       	pop	r17
     9ac:	0f 91       	pop	r16
     9ae:	ff 90       	pop	r15
     9b0:	ef 90       	pop	r14
     9b2:	df 90       	pop	r13
     9b4:	cf 90       	pop	r12
     9b6:	bf 90       	pop	r11
     9b8:	08 95       	ret
     9ba:	f8 01       	movw	r30, r16
     9bc:	ee 0f       	add	r30, r30
     9be:	ff 1f       	adc	r31, r31
     9c0:	ee 0f       	add	r30, r30
     9c2:	ff 1f       	adc	r31, r31
     9c4:	ee 0f       	add	r30, r30
     9c6:	ff 1f       	adc	r31, r31
     9c8:	e0 1b       	sub	r30, r16
     9ca:	f1 0b       	sbc	r31, r17
     9cc:	e6 5b       	subi	r30, 0xB6	; 182
     9ce:	f9 4f       	sbci	r31, 0xF9	; 249
     9d0:	12 aa       	std	Z+50, r1	; 0x32
     9d2:	14 aa       	std	Z+52, r1	; 0x34
     9d4:	80 ef       	ldi	r24, 0xF0	; 240
     9d6:	90 e0       	ldi	r25, 0x00	; 0
     9d8:	90 a7       	std	Z+40, r25	; 0x28
     9da:	87 a3       	std	Z+39, r24	; 0x27
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	02 c0       	rjmp	.+4      	; 0x9e6 <UpdateTrack+0xe6>
     9e2:	88 0f       	add	r24, r24
     9e4:	99 1f       	adc	r25, r25
     9e6:	ba 94       	dec	r11
     9e8:	e2 f7       	brpl	.-8      	; 0x9e2 <UpdateTrack+0xe2>
     9ea:	20 91 07 07 	lds	r18, 0x0707
     9ee:	30 91 08 07 	lds	r19, 0x0708
     9f2:	82 2b       	or	r24, r18
     9f4:	93 2b       	or	r25, r19
     9f6:	90 93 08 07 	sts	0x0708, r25
     9fa:	80 93 07 07 	sts	0x0707, r24
     9fe:	d3 cf       	rjmp	.-90     	; 0x9a6 <UpdateTrack+0xa6>
     a00:	81 a9       	ldd	r24, Z+49	; 0x31
     a02:	8c 3f       	cpi	r24, 0xFC	; 252
     a04:	09 f0       	breq	.+2      	; 0xa08 <UpdateTrack+0x108>
     a06:	b4 cf       	rjmp	.-152    	; 0x970 <UpdateTrack+0x70>
     a08:	72 dc       	rcall	.-1820   	; 0x2ee <MIDI_RawOutByte>
     a0a:	81 e0       	ldi	r24, 0x01	; 1
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	0b 2c       	mov	r0, r11
     a10:	02 c0       	rjmp	.+4      	; 0xa16 <UpdateTrack+0x116>
     a12:	88 0f       	add	r24, r24
     a14:	99 1f       	adc	r25, r25
     a16:	0a 94       	dec	r0
     a18:	e2 f7       	brpl	.-8      	; 0xa12 <UpdateTrack+0x112>
     a1a:	48 2f       	mov	r20, r24
     a1c:	40 95       	com	r20
     a1e:	20 91 04 07 	lds	r18, 0x0704
     a22:	42 23       	and	r20, r18
     a24:	40 93 04 07 	sts	0x0704, r20
     a28:	80 95       	com	r24
     a2a:	90 95       	com	r25
     a2c:	20 91 07 07 	lds	r18, 0x0707
     a30:	30 91 08 07 	lds	r19, 0x0708
     a34:	82 23       	and	r24, r18
     a36:	93 23       	and	r25, r19
     a38:	90 93 08 07 	sts	0x0708, r25
     a3c:	80 93 07 07 	sts	0x0707, r24
     a40:	84 2f       	mov	r24, r20
     a42:	98 cf       	rjmp	.-208    	; 0x974 <UpdateTrack+0x74>

00000a44 <QueueUsed>:
     a44:	80 91 6f 06 	lds	r24, 0x066F
     a48:	90 91 70 06 	lds	r25, 0x0670
     a4c:	08 95       	ret

00000a4e <MPU401_WriteCommand>:
     a4e:	cf 93       	push	r28
     a50:	c8 2f       	mov	r28, r24
     a52:	80 91 f4 06 	lds	r24, 0x06F4
     a56:	88 23       	and	r24, r24
     a58:	b9 f0       	breq	.+46     	; 0xa88 <MPU401_WriteCommand+0x3a>
     a5a:	20 91 00 07 	lds	r18, 0x0700
     a5e:	30 91 01 07 	lds	r19, 0x0701
     a62:	23 2b       	or	r18, r19
     a64:	21 f4       	brne	.+8      	; 0xa6e <MPU401_WriteCommand+0x20>
     a66:	cf 33       	cpi	r28, 0x3F	; 63
     a68:	59 f0       	breq	.+22     	; 0xa80 <MPU401_WriteCommand+0x32>
     a6a:	cf 3f       	cpi	r28, 0xFF	; 255
     a6c:	49 f0       	breq	.+18     	; 0xa80 <MPU401_WriteCommand+0x32>
     a6e:	8c 2f       	mov	r24, r28
     a70:	90 e0       	ldi	r25, 0x00	; 0
     a72:	01 96       	adiw	r24, 0x01	; 1
     a74:	90 93 01 07 	sts	0x0701, r25
     a78:	80 93 00 07 	sts	0x0700, r24
     a7c:	cf 91       	pop	r28
     a7e:	08 95       	ret
     a80:	81 e0       	ldi	r24, 0x01	; 1
     a82:	94 d7       	rcall	.+3880   	; 0x19ac <PIC_RemoveEvents>
     a84:	10 92 f4 06 	sts	0x06F4, r1
     a88:	c0 33       	cpi	r28, 0x30	; 48
     a8a:	a8 f5       	brcc	.+106    	; 0xaf6 <MPU401_WriteCommand+0xa8>
     a8c:	8c 2f       	mov	r24, r28
     a8e:	83 70       	andi	r24, 0x03	; 3
     a90:	82 30       	cpi	r24, 0x02	; 2
     a92:	09 f4       	brne	.+2      	; 0xa96 <MPU401_WriteCommand+0x48>
     a94:	ca c0       	rjmp	.+404    	; 0xc2a <MPU401_WriteCommand+0x1dc>
     a96:	83 30       	cpi	r24, 0x03	; 3
     a98:	09 f4       	brne	.+2      	; 0xa9c <MPU401_WriteCommand+0x4e>
     a9a:	99 c0       	rjmp	.+306    	; 0xbce <MPU401_WriteCommand+0x180>
     a9c:	81 30       	cpi	r24, 0x01	; 1
     a9e:	11 f4       	brne	.+4      	; 0xaa4 <MPU401_WriteCommand+0x56>
     aa0:	8c ef       	ldi	r24, 0xFC	; 252
     aa2:	25 dc       	rcall	.-1974   	; 0x2ee <MIDI_RawOutByte>
     aa4:	cc 70       	andi	r28, 0x0C	; 12
     aa6:	c4 30       	cpi	r28, 0x04	; 4
     aa8:	09 f4       	brne	.+2      	; 0xaac <MPU401_WriteCommand+0x5e>
     aaa:	a4 c0       	rjmp	.+328    	; 0xbf4 <MPU401_WriteCommand+0x1a6>
     aac:	c8 30       	cpi	r28, 0x08	; 8
     aae:	09 f0       	breq	.+2      	; 0xab2 <MPU401_WriteCommand+0x64>
     ab0:	9e c0       	rjmp	.+316    	; 0xbee <MPU401_WriteCommand+0x1a0>
     ab2:	81 e0       	ldi	r24, 0x01	; 1
     ab4:	80 93 f3 06 	sts	0x06F3, r24
     ab8:	80 e0       	ldi	r24, 0x00	; 0
     aba:	78 d7       	rcall	.+3824   	; 0x19ac <PIC_RemoveEvents>
     abc:	60 91 0d 07 	lds	r22, 0x070D
     ac0:	80 91 0b 07 	lds	r24, 0x070B
     ac4:	68 9f       	mul	r22, r24
     ac6:	b0 01       	movw	r22, r0
     ac8:	11 24       	eor	r1, r1
     aca:	80 e9       	ldi	r24, 0x90	; 144
     acc:	92 ee       	ldi	r25, 0xE2	; 226
     ace:	e1 d7       	rcall	.+4034   	; 0x1a92 <__udivmodhi4>
     ad0:	80 e0       	ldi	r24, 0x00	; 0
     ad2:	3e d7       	rcall	.+3708   	; 0x1950 <PIC_AddEvent>
     ad4:	10 92 70 06 	sts	0x0670, r1
     ad8:	10 92 6f 06 	sts	0x066F, r1
     adc:	10 92 6e 06 	sts	0x066E, r1
     ae0:	10 92 6d 06 	sts	0x066D, r1
     ae4:	80 91 f2 06 	lds	r24, 0x06F2
     ae8:	81 11       	cpse	r24, r1
     aea:	6d c0       	rjmp	.+218    	; 0xbc6 <MPU401_WriteCommand+0x178>
     aec:	80 91 6f 06 	lds	r24, 0x066F
     af0:	90 91 70 06 	lds	r25, 0x0670
     af4:	2b c0       	rjmp	.+86     	; 0xb4c <MPU401_WriteCommand+0xfe>
     af6:	80 e6       	ldi	r24, 0x60	; 96
     af8:	8c 0f       	add	r24, r28
     afa:	88 30       	cpi	r24, 0x08	; 8
     afc:	08 f0       	brcs	.+2      	; 0xb00 <MPU401_WriteCommand+0xb2>
     afe:	4b c0       	rjmp	.+150    	; 0xb96 <MPU401_WriteCommand+0x148>
     b00:	c7 70       	andi	r28, 0x07	; 7
     b02:	4c 2f       	mov	r20, r28
     b04:	50 e0       	ldi	r21, 0x00	; 0
     b06:	20 91 03 07 	lds	r18, 0x0703
     b0a:	30 e0       	ldi	r19, 0x00	; 0
     b0c:	02 c0       	rjmp	.+4      	; 0xb12 <MPU401_WriteCommand+0xc4>
     b0e:	35 95       	asr	r19
     b10:	27 95       	ror	r18
     b12:	ca 95       	dec	r28
     b14:	e2 f7       	brpl	.-8      	; 0xb0e <MPU401_WriteCommand+0xc0>
     b16:	20 ff       	sbrs	r18, 0
     b18:	6a c0       	rjmp	.+212    	; 0xbee <MPU401_WriteCommand+0x1a0>
     b1a:	44 0f       	add	r20, r20
     b1c:	55 1f       	adc	r21, r21
     b1e:	fa 01       	movw	r30, r20
     b20:	ee 0f       	add	r30, r30
     b22:	ff 1f       	adc	r31, r31
     b24:	ee 0f       	add	r30, r30
     b26:	ff 1f       	adc	r31, r31
     b28:	ee 0f       	add	r30, r30
     b2a:	ff 1f       	adc	r31, r31
     b2c:	e4 1b       	sub	r30, r20
     b2e:	f5 0b       	sbc	r31, r21
     b30:	e6 5b       	subi	r30, 0xB6	; 182
     b32:	f9 4f       	sbci	r31, 0xF9	; 249
     b34:	67 a1       	ldd	r22, Z+39	; 0x27
     b36:	80 91 f2 06 	lds	r24, 0x06F2
     b3a:	88 23       	and	r24, r24
     b3c:	09 f4       	brne	.+2      	; 0xb40 <MPU401_WriteCommand+0xf2>
     b3e:	57 c1       	rjmp	.+686    	; 0xdee <MPU401_WriteCommand+0x3a0>
     b40:	10 92 f2 06 	sts	0x06F2, r1
     b44:	80 91 6f 06 	lds	r24, 0x066F
     b48:	90 91 70 06 	lds	r25, 0x0670
     b4c:	80 32       	cpi	r24, 0x20	; 32
     b4e:	91 05       	cpc	r25, r1
     b50:	08 f0       	brcs	.+2      	; 0xb54 <MPU401_WriteCommand+0x106>
     b52:	94 cf       	rjmp	.-216    	; 0xa7c <MPU401_WriteCommand+0x2e>
     b54:	40 91 6d 06 	lds	r20, 0x066D
     b58:	50 91 6e 06 	lds	r21, 0x066E
     b5c:	9c 01       	movw	r18, r24
     b5e:	24 0f       	add	r18, r20
     b60:	35 1f       	adc	r19, r21
     b62:	40 32       	cpi	r20, 0x20	; 32
     b64:	51 05       	cpc	r21, r1
     b66:	30 f0       	brcs	.+12     	; 0xb74 <MPU401_WriteCommand+0x126>
     b68:	40 52       	subi	r20, 0x20	; 32
     b6a:	51 09       	sbc	r21, r1
     b6c:	50 93 6e 06 	sts	0x066E, r21
     b70:	40 93 6d 06 	sts	0x066D, r20
     b74:	20 32       	cpi	r18, 0x20	; 32
     b76:	31 05       	cpc	r19, r1
     b78:	10 f0       	brcs	.+4      	; 0xb7e <MPU401_WriteCommand+0x130>
     b7a:	20 52       	subi	r18, 0x20	; 32
     b7c:	31 09       	sbc	r19, r1
     b7e:	01 96       	adiw	r24, 0x01	; 1
     b80:	90 93 70 06 	sts	0x0670, r25
     b84:	80 93 6f 06 	sts	0x066F, r24
     b88:	f9 01       	movw	r30, r18
     b8a:	e6 5b       	subi	r30, 0xB6	; 182
     b8c:	f9 4f       	sbci	r31, 0xF9	; 249
     b8e:	8e ef       	ldi	r24, 0xFE	; 254
     b90:	83 83       	std	Z+3, r24	; 0x03
     b92:	cf 91       	pop	r28
     b94:	08 95       	ret
     b96:	80 e3       	ldi	r24, 0x30	; 48
     b98:	8c 0f       	add	r24, r28
     b9a:	88 30       	cpi	r24, 0x08	; 8
     b9c:	08 f0       	brcs	.+2      	; 0xba0 <MPU401_WriteCommand+0x152>
     b9e:	3b c0       	rjmp	.+118    	; 0xc16 <MPU401_WriteCommand+0x1c8>
     ba0:	80 91 09 07 	lds	r24, 0x0709
     ba4:	80 93 0a 07 	sts	0x070A, r24
     ba8:	c7 70       	andi	r28, 0x07	; 7
     baa:	c0 93 09 07 	sts	0x0709, r28
     bae:	81 e0       	ldi	r24, 0x01	; 1
     bb0:	80 93 f5 06 	sts	0x06F5, r24
     bb4:	10 92 f6 06 	sts	0x06F6, r1
     bb8:	80 93 f7 06 	sts	0x06F7, r24
     bbc:	80 91 f2 06 	lds	r24, 0x06F2
     bc0:	88 23       	and	r24, r24
     bc2:	09 f4       	brne	.+2      	; 0xbc6 <MPU401_WriteCommand+0x178>
     bc4:	93 cf       	rjmp	.-218    	; 0xaec <MPU401_WriteCommand+0x9e>
     bc6:	10 92 f2 06 	sts	0x06F2, r1
     bca:	cf 91       	pop	r28
     bcc:	08 95       	ret
     bce:	8b ef       	ldi	r24, 0xFB	; 251
     bd0:	8e db       	rcall	.-2276   	; 0x2ee <MIDI_RawOutByte>
     bd2:	68 cf       	rjmp	.-304    	; 0xaa4 <MPU401_WriteCommand+0x56>
     bd4:	6c e6       	ldi	r22, 0x6C	; 108
     bd6:	70 e0       	ldi	r23, 0x00	; 0
     bd8:	81 e0       	ldi	r24, 0x01	; 1
     bda:	ba d6       	rcall	.+3444   	; 0x1950 <PIC_AddEvent>
     bdc:	81 e0       	ldi	r24, 0x01	; 1
     bde:	80 93 f4 06 	sts	0x06F4, r24
     be2:	d8 dd       	rcall	.-1104   	; 0x794 <MPU401_Reset>
     be4:	80 91 4c 06 	lds	r24, 0x064C
     be8:	88 23       	and	r24, r24
     bea:	09 f4       	brne	.+2      	; 0xbee <MPU401_WriteCommand+0x1a0>
     bec:	47 cf       	rjmp	.-370    	; 0xa7c <MPU401_WriteCommand+0x2e>
     bee:	80 91 f2 06 	lds	r24, 0x06F2
     bf2:	e6 cf       	rjmp	.-52     	; 0xbc0 <MPU401_WriteCommand+0x172>
     bf4:	80 e0       	ldi	r24, 0x00	; 0
     bf6:	da d6       	rcall	.+3508   	; 0x19ac <PIC_RemoveEvents>
     bf8:	10 92 f3 06 	sts	0x06F3, r1
     bfc:	c0 eb       	ldi	r28, 0xB0	; 176
     bfe:	8c 2f       	mov	r24, r28
     c00:	76 db       	rcall	.-2324   	; 0x2ee <MIDI_RawOutByte>
     c02:	8b e7       	ldi	r24, 0x7B	; 123
     c04:	74 db       	rcall	.-2328   	; 0x2ee <MIDI_RawOutByte>
     c06:	80 e0       	ldi	r24, 0x00	; 0
     c08:	72 db       	rcall	.-2332   	; 0x2ee <MIDI_RawOutByte>
     c0a:	cf 5f       	subi	r28, 0xFF	; 255
     c0c:	cf 3b       	cpi	r28, 0xBF	; 191
     c0e:	b9 f7       	brne	.-18     	; 0xbfe <MPU401_WriteCommand+0x1b0>
     c10:	80 91 f2 06 	lds	r24, 0x06F2
     c14:	d5 cf       	rjmp	.-86     	; 0xbc0 <MPU401_WriteCommand+0x172>
     c16:	4c 2f       	mov	r20, r28
     c18:	50 e0       	ldi	r21, 0x00	; 0
     c1a:	fa 01       	movw	r30, r20
     c1c:	ff 97       	sbiw	r30, 0x3f	; 63
     c1e:	e1 3c       	cpi	r30, 0xC1	; 193
     c20:	f1 05       	cpc	r31, r1
     c22:	28 f7       	brcc	.-54     	; 0xbee <MPU401_WriteCommand+0x1a0>
     c24:	ea 5b       	subi	r30, 0xBA	; 186
     c26:	ff 4f       	sbci	r31, 0xFF	; 255
     c28:	48 c7       	rjmp	.+3728   	; 0x1aba <__tablejump2__>
     c2a:	8a ef       	ldi	r24, 0xFA	; 250
     c2c:	60 db       	rcall	.-2368   	; 0x2ee <MIDI_RawOutByte>
     c2e:	3a cf       	rjmp	.-396    	; 0xaa4 <MPU401_WriteCommand+0x56>
     c30:	8c 2f       	mov	r24, r28
     c32:	90 e0       	ldi	r25, 0x00	; 0
     c34:	90 93 ff 06 	sts	0x06FF, r25
     c38:	80 93 fe 06 	sts	0x06FE, r24
     c3c:	80 91 f2 06 	lds	r24, 0x06F2
     c40:	bf cf       	rjmp	.-130    	; 0xbc0 <MPU401_WriteCommand+0x172>
     c42:	10 92 f5 06 	sts	0x06F5, r1
     c46:	81 e0       	ldi	r24, 0x01	; 1
     c48:	80 93 f6 06 	sts	0x06F6, r24
     c4c:	80 93 f7 06 	sts	0x06F7, r24
     c50:	80 91 f2 06 	lds	r24, 0x06F2
     c54:	b5 cf       	rjmp	.-150    	; 0xbc0 <MPU401_WriteCommand+0x172>
     c56:	80 e3       	ldi	r24, 0x30	; 48
     c58:	80 93 0b 07 	sts	0x070B, r24
     c5c:	80 91 f2 06 	lds	r24, 0x06F2
     c60:	af cf       	rjmp	.-162    	; 0xbc0 <MPU401_WriteCommand+0x172>
     c62:	8a e2       	ldi	r24, 0x2A	; 42
     c64:	80 93 0b 07 	sts	0x070B, r24
     c68:	80 91 f2 06 	lds	r24, 0x06F2
     c6c:	a9 cf       	rjmp	.-174    	; 0xbc0 <MPU401_WriteCommand+0x172>
     c6e:	84 e2       	ldi	r24, 0x24	; 36
     c70:	80 93 0b 07 	sts	0x070B, r24
     c74:	80 91 f2 06 	lds	r24, 0x06F2
     c78:	a3 cf       	rjmp	.-186    	; 0xbc0 <MPU401_WriteCommand+0x172>
     c7a:	8e e1       	ldi	r24, 0x1E	; 30
     c7c:	80 93 0b 07 	sts	0x070B, r24
     c80:	80 91 f2 06 	lds	r24, 0x06F2
     c84:	9d cf       	rjmp	.-198    	; 0xbc0 <MPU401_WriteCommand+0x172>
     c86:	88 e1       	ldi	r24, 0x18	; 24
     c88:	80 93 0b 07 	sts	0x070B, r24
     c8c:	80 91 f2 06 	lds	r24, 0x06F2
     c90:	97 cf       	rjmp	.-210    	; 0xbc0 <MPU401_WriteCommand+0x172>
     c92:	82 e1       	ldi	r24, 0x12	; 18
     c94:	80 93 0b 07 	sts	0x070B, r24
     c98:	80 91 f2 06 	lds	r24, 0x06F2
     c9c:	91 cf       	rjmp	.-222    	; 0xbc0 <MPU401_WriteCommand+0x172>
     c9e:	8c e0       	ldi	r24, 0x0C	; 12
     ca0:	80 93 0b 07 	sts	0x070B, r24
     ca4:	80 91 f2 06 	lds	r24, 0x06F2
     ca8:	8b cf       	rjmp	.-234    	; 0xbc0 <MPU401_WriteCommand+0x172>
     caa:	c0 eb       	ldi	r28, 0xB0	; 176
     cac:	8c 2f       	mov	r24, r28
     cae:	1f db       	rcall	.-2498   	; 0x2ee <MIDI_RawOutByte>
     cb0:	8b e7       	ldi	r24, 0x7B	; 123
     cb2:	1d db       	rcall	.-2502   	; 0x2ee <MIDI_RawOutByte>
     cb4:	80 e0       	ldi	r24, 0x00	; 0
     cb6:	1b db       	rcall	.-2506   	; 0x2ee <MIDI_RawOutByte>
     cb8:	cf 5f       	subi	r28, 0xFF	; 255
     cba:	cf 3b       	cpi	r28, 0xBF	; 191
     cbc:	b9 f7       	brne	.-18     	; 0xcac <MPU401_WriteCommand+0x25e>
     cbe:	10 92 72 06 	sts	0x0672, r1
     cc2:	10 92 71 06 	sts	0x0671, r1
     cc6:	10 92 7e 06 	sts	0x067E, r1
     cca:	10 92 80 06 	sts	0x0680, r1
     cce:	10 92 7f 06 	sts	0x067F, r1
     cd2:	10 92 8c 06 	sts	0x068C, r1
     cd6:	10 92 8e 06 	sts	0x068E, r1
     cda:	10 92 8d 06 	sts	0x068D, r1
     cde:	10 92 9a 06 	sts	0x069A, r1
     ce2:	10 92 9c 06 	sts	0x069C, r1
     ce6:	10 92 9b 06 	sts	0x069B, r1
     cea:	10 92 a8 06 	sts	0x06A8, r1
     cee:	10 92 aa 06 	sts	0x06AA, r1
     cf2:	10 92 a9 06 	sts	0x06A9, r1
     cf6:	10 92 b6 06 	sts	0x06B6, r1
     cfa:	10 92 b8 06 	sts	0x06B8, r1
     cfe:	10 92 b7 06 	sts	0x06B7, r1
     d02:	10 92 c4 06 	sts	0x06C4, r1
     d06:	10 92 c6 06 	sts	0x06C6, r1
     d0a:	10 92 c5 06 	sts	0x06C5, r1
     d0e:	10 92 d2 06 	sts	0x06D2, r1
     d12:	10 92 d4 06 	sts	0x06D4, r1
     d16:	10 92 d3 06 	sts	0x06D3, r1
     d1a:	10 92 e0 06 	sts	0x06E0, r1
     d1e:	10 92 e2 06 	sts	0x06E2, r1
     d22:	10 92 e1 06 	sts	0x06E1, r1
     d26:	10 92 ee 06 	sts	0x06EE, r1
     d2a:	80 91 f1 06 	lds	r24, 0x06F1
     d2e:	80 93 ef 06 	sts	0x06EF, r24
     d32:	81 11       	cpse	r24, r1
     d34:	02 c0       	rjmp	.+4      	; 0xd3a <MPU401_WriteCommand+0x2ec>
     d36:	10 92 f0 06 	sts	0x06F0, r1
     d3a:	80 91 02 07 	lds	r24, 0x0702
     d3e:	80 93 04 07 	sts	0x0704, r24
     d42:	10 92 08 07 	sts	0x0708, r1
     d46:	10 92 07 07 	sts	0x0707, r1
     d4a:	81 e0       	ldi	r24, 0x01	; 1
     d4c:	80 93 f9 06 	sts	0x06F9, r24
     d50:	80 91 f2 06 	lds	r24, 0x06F2
     d54:	35 cf       	rjmp	.-406    	; 0xbc0 <MPU401_WriteCommand+0x172>
     d56:	88 e2       	ldi	r24, 0x28	; 40
     d58:	80 93 0f 07 	sts	0x070F, r24
     d5c:	80 91 f2 06 	lds	r24, 0x06F2
     d60:	2f cf       	rjmp	.-418    	; 0xbc0 <MPU401_WriteCommand+0x172>
     d62:	80 91 f2 06 	lds	r24, 0x06F2
     d66:	88 23       	and	r24, r24
     d68:	09 f4       	brne	.+2      	; 0xd6c <MPU401_WriteCommand+0x31e>
     d6a:	78 c0       	rjmp	.+240    	; 0xe5c <MPU401_WriteCommand+0x40e>
     d6c:	10 92 f2 06 	sts	0x06F2, r1
     d70:	80 91 0d 07 	lds	r24, 0x070D
     d74:	cf 91       	pop	r28
     d76:	9d cd       	rjmp	.-1222   	; 0x8b2 <QueueByte.part.0>
     d78:	80 91 f2 06 	lds	r24, 0x06F2
     d7c:	88 23       	and	r24, r24
     d7e:	09 f4       	brne	.+2      	; 0xd82 <MPU401_WriteCommand+0x334>
     d80:	76 c0       	rjmp	.+236    	; 0xe6e <MPU401_WriteCommand+0x420>
     d82:	10 92 f2 06 	sts	0x06F2, r1
     d86:	81 e0       	ldi	r24, 0x01	; 1
     d88:	cf 91       	pop	r28
     d8a:	93 cd       	rjmp	.-1242   	; 0x8b2 <QueueByte.part.0>
     d8c:	80 91 4b 06 	lds	r24, 0x064B
     d90:	88 23       	and	r24, r24
     d92:	09 f4       	brne	.+2      	; 0xd96 <MPU401_WriteCommand+0x348>
     d94:	53 c0       	rjmp	.+166    	; 0xe3c <MPU401_WriteCommand+0x3ee>
     d96:	80 91 f2 06 	lds	r24, 0x06F2
     d9a:	88 23       	and	r24, r24
     d9c:	09 f4       	brne	.+2      	; 0xda0 <MPU401_WriteCommand+0x352>
     d9e:	6e c0       	rjmp	.+220    	; 0xe7c <MPU401_WriteCommand+0x42e>
     da0:	10 92 f2 06 	sts	0x06F2, r1
     da4:	8e ef       	ldi	r24, 0xFE	; 254
     da6:	cf 91       	pop	r28
     da8:	84 cd       	rjmp	.-1272   	; 0x8b2 <QueueByte.part.0>
     daa:	81 e0       	ldi	r24, 0x01	; 1
     dac:	80 93 f1 06 	sts	0x06F1, r24
     db0:	80 91 f2 06 	lds	r24, 0x06F2
     db4:	05 cf       	rjmp	.-502    	; 0xbc0 <MPU401_WriteCommand+0x172>
     db6:	10 92 f1 06 	sts	0x06F1, r1
     dba:	80 91 f2 06 	lds	r24, 0x06F2
     dbe:	00 cf       	rjmp	.-512    	; 0xbc0 <MPU401_WriteCommand+0x172>
     dc0:	81 e0       	ldi	r24, 0x01	; 1
     dc2:	80 93 14 07 	sts	0x0714, r24
     dc6:	80 91 f2 06 	lds	r24, 0x06F2
     dca:	fa ce       	rjmp	.-524    	; 0xbc0 <MPU401_WriteCommand+0x172>
     dcc:	10 92 14 07 	sts	0x0714, r1
     dd0:	80 91 f2 06 	lds	r24, 0x06F2
     dd4:	f5 ce       	rjmp	.-534    	; 0xbc0 <MPU401_WriteCommand+0x172>
     dd6:	80 91 f2 06 	lds	r24, 0x06F2
     dda:	88 23       	and	r24, r24
     ddc:	c1 f1       	breq	.+112    	; 0xe4e <MPU401_WriteCommand+0x400>
     dde:	10 92 f2 06 	sts	0x06F2, r1
     de2:	80 e0       	ldi	r24, 0x00	; 0
     de4:	cf 91       	pop	r28
     de6:	65 cd       	rjmp	.-1334   	; 0x8b2 <QueueByte.part.0>
     de8:	10 92 4c 06 	sts	0x064C, r1
     dec:	47 ce       	rjmp	.-882    	; 0xa7c <MPU401_WriteCommand+0x2e>
     dee:	80 91 6f 06 	lds	r24, 0x066F
     df2:	90 91 70 06 	lds	r25, 0x0670
     df6:	80 32       	cpi	r24, 0x20	; 32
     df8:	91 05       	cpc	r25, r1
     dfa:	08 f0       	brcs	.+2      	; 0xdfe <MPU401_WriteCommand+0x3b0>
     dfc:	a7 ce       	rjmp	.-690    	; 0xb4c <MPU401_WriteCommand+0xfe>
     dfe:	40 91 6d 06 	lds	r20, 0x066D
     e02:	50 91 6e 06 	lds	r21, 0x066E
     e06:	9a 01       	movw	r18, r20
     e08:	28 0f       	add	r18, r24
     e0a:	39 1f       	adc	r19, r25
     e0c:	40 32       	cpi	r20, 0x20	; 32
     e0e:	51 05       	cpc	r21, r1
     e10:	30 f0       	brcs	.+12     	; 0xe1e <MPU401_WriteCommand+0x3d0>
     e12:	40 52       	subi	r20, 0x20	; 32
     e14:	51 09       	sbc	r21, r1
     e16:	50 93 6e 06 	sts	0x066E, r21
     e1a:	40 93 6d 06 	sts	0x066D, r20
     e1e:	20 32       	cpi	r18, 0x20	; 32
     e20:	31 05       	cpc	r19, r1
     e22:	10 f0       	brcs	.+4      	; 0xe28 <MPU401_WriteCommand+0x3da>
     e24:	20 52       	subi	r18, 0x20	; 32
     e26:	31 09       	sbc	r19, r1
     e28:	01 96       	adiw	r24, 0x01	; 1
     e2a:	90 93 70 06 	sts	0x0670, r25
     e2e:	80 93 6f 06 	sts	0x066F, r24
     e32:	f9 01       	movw	r30, r18
     e34:	e6 5b       	subi	r30, 0xB6	; 182
     e36:	f9 4f       	sbci	r31, 0xF9	; 249
     e38:	63 83       	std	Z+3, r22	; 0x03
     e3a:	58 ce       	rjmp	.-848    	; 0xaec <MPU401_WriteCommand+0x9e>
     e3c:	80 91 f2 06 	lds	r24, 0x06F2
     e40:	88 23       	and	r24, r24
     e42:	19 f1       	breq	.+70     	; 0xe8a <MPU401_WriteCommand+0x43c>
     e44:	10 92 f2 06 	sts	0x06F2, r1
     e48:	85 e1       	ldi	r24, 0x15	; 21
     e4a:	cf 91       	pop	r28
     e4c:	32 cd       	rjmp	.-1436   	; 0x8b2 <QueueByte.part.0>
     e4e:	8e ef       	ldi	r24, 0xFE	; 254
     e50:	30 dd       	rcall	.-1440   	; 0x8b2 <QueueByte.part.0>
     e52:	80 91 f2 06 	lds	r24, 0x06F2
     e56:	81 11       	cpse	r24, r1
     e58:	b6 ce       	rjmp	.-660    	; 0xbc6 <MPU401_WriteCommand+0x178>
     e5a:	c3 cf       	rjmp	.-122    	; 0xde2 <MPU401_WriteCommand+0x394>
     e5c:	8e ef       	ldi	r24, 0xFE	; 254
     e5e:	29 dd       	rcall	.-1454   	; 0x8b2 <QueueByte.part.0>
     e60:	80 91 0d 07 	lds	r24, 0x070D
     e64:	90 91 f2 06 	lds	r25, 0x06F2
     e68:	91 11       	cpse	r25, r1
     e6a:	ad ce       	rjmp	.-678    	; 0xbc6 <MPU401_WriteCommand+0x178>
     e6c:	83 cf       	rjmp	.-250    	; 0xd74 <MPU401_WriteCommand+0x326>
     e6e:	8e ef       	ldi	r24, 0xFE	; 254
     e70:	20 dd       	rcall	.-1472   	; 0x8b2 <QueueByte.part.0>
     e72:	80 91 f2 06 	lds	r24, 0x06F2
     e76:	81 11       	cpse	r24, r1
     e78:	a6 ce       	rjmp	.-692    	; 0xbc6 <MPU401_WriteCommand+0x178>
     e7a:	85 cf       	rjmp	.-246    	; 0xd86 <MPU401_WriteCommand+0x338>
     e7c:	85 e1       	ldi	r24, 0x15	; 21
     e7e:	19 dd       	rcall	.-1486   	; 0x8b2 <QueueByte.part.0>
     e80:	80 91 f2 06 	lds	r24, 0x06F2
     e84:	81 11       	cpse	r24, r1
     e86:	9f ce       	rjmp	.-706    	; 0xbc6 <MPU401_WriteCommand+0x178>
     e88:	8d cf       	rjmp	.-230    	; 0xda4 <MPU401_WriteCommand+0x356>
     e8a:	8e ef       	ldi	r24, 0xFE	; 254
     e8c:	12 dd       	rcall	.-1500   	; 0x8b2 <QueueByte.part.0>
     e8e:	80 91 f2 06 	lds	r24, 0x06F2
     e92:	81 11       	cpse	r24, r1
     e94:	98 ce       	rjmp	.-720    	; 0xbc6 <MPU401_WriteCommand+0x178>
     e96:	d8 cf       	rjmp	.-80     	; 0xe48 <MPU401_WriteCommand+0x3fa>

00000e98 <MPU401_EOIHandler>:
     e98:	10 92 fb 06 	sts	0x06FB, r1
     e9c:	80 91 fa 06 	lds	r24, 0x06FA
     ea0:	88 23       	and	r24, r24
     ea2:	e9 f0       	breq	.+58     	; 0xede <MPU401_EOIHandler+0x46>
     ea4:	10 92 fa 06 	sts	0x06FA, r1
     ea8:	80 91 f0 06 	lds	r24, 0x06F0
     eac:	88 23       	and	r24, r24
     eae:	09 f4       	brne	.+2      	; 0xeb2 <MPU401_EOIHandler+0x1a>
     eb0:	43 c0       	rjmp	.+134    	; 0xf38 <MPU401_EOIHandler+0xa0>
     eb2:	80 91 e3 06 	lds	r24, 0x06E3
     eb6:	8c 3f       	cpi	r24, 0xFC	; 252
     eb8:	09 f4       	brne	.+2      	; 0xebc <MPU401_EOIHandler+0x24>
     eba:	42 c0       	rjmp	.+132    	; 0xf40 <MPU401_EOIHandler+0xa8>
     ebc:	10 92 ec 06 	sts	0x06EC, r1
     ec0:	80 ef       	ldi	r24, 0xF0	; 240
     ec2:	90 e0       	ldi	r25, 0x00	; 0
     ec4:	90 93 e2 06 	sts	0x06E2, r25
     ec8:	80 93 e1 06 	sts	0x06E1, r24
     ecc:	80 91 07 07 	lds	r24, 0x0707
     ed0:	90 91 08 07 	lds	r25, 0x0708
     ed4:	92 60       	ori	r25, 0x02	; 2
     ed6:	90 93 08 07 	sts	0x0708, r25
     eda:	80 93 07 07 	sts	0x0707, r24
     ede:	10 92 f9 06 	sts	0x06F9, r1
     ee2:	80 91 f3 06 	lds	r24, 0x06F3
     ee6:	88 23       	and	r24, r24
     ee8:	31 f1       	breq	.+76     	; 0xf36 <MPU401_EOIHandler+0x9e>
     eea:	80 91 07 07 	lds	r24, 0x0707
     eee:	90 91 08 07 	lds	r25, 0x0708
     ef2:	00 97       	sbiw	r24, 0x00	; 0
     ef4:	01 f1       	breq	.+64     	; 0xf36 <MPU401_EOIHandler+0x9e>
     ef6:	80 fd       	sbrc	r24, 0
     ef8:	77 c0       	rjmp	.+238    	; 0xfe8 <MPU401_EOIHandler+0x150>
     efa:	81 fd       	sbrc	r24, 1
     efc:	79 c0       	rjmp	.+242    	; 0xff0 <MPU401_EOIHandler+0x158>
     efe:	82 fd       	sbrc	r24, 2
     f00:	7b c0       	rjmp	.+246    	; 0xff8 <MPU401_EOIHandler+0x160>
     f02:	83 fd       	sbrc	r24, 3
     f04:	7d c0       	rjmp	.+250    	; 0x1000 <MPU401_EOIHandler+0x168>
     f06:	84 fd       	sbrc	r24, 4
     f08:	7f c0       	rjmp	.+254    	; 0x1008 <MPU401_EOIHandler+0x170>
     f0a:	85 fd       	sbrc	r24, 5
     f0c:	81 c0       	rjmp	.+258    	; 0x1010 <MPU401_EOIHandler+0x178>
     f0e:	86 fd       	sbrc	r24, 6
     f10:	83 c0       	rjmp	.+262    	; 0x1018 <MPU401_EOIHandler+0x180>
     f12:	87 fd       	sbrc	r24, 7
     f14:	85 c0       	rjmp	.+266    	; 0x1020 <MPU401_EOIHandler+0x188>
     f16:	90 fd       	sbrc	r25, 0
     f18:	87 c0       	rjmp	.+270    	; 0x1028 <MPU401_EOIHandler+0x190>
     f1a:	91 fd       	sbrc	r25, 1
     f1c:	89 c0       	rjmp	.+274    	; 0x1030 <MPU401_EOIHandler+0x198>
     f1e:	92 fd       	sbrc	r25, 2
     f20:	8b c0       	rjmp	.+278    	; 0x1038 <MPU401_EOIHandler+0x1a0>
     f22:	93 fd       	sbrc	r25, 3
     f24:	8d c0       	rjmp	.+282    	; 0x1040 <MPU401_EOIHandler+0x1a8>
     f26:	94 fd       	sbrc	r25, 4
     f28:	8f c0       	rjmp	.+286    	; 0x1048 <MPU401_EOIHandler+0x1b0>
     f2a:	95 fd       	sbrc	r25, 5
     f2c:	20 c0       	rjmp	.+64     	; 0xf6e <MPU401_EOIHandler+0xd6>
     f2e:	96 fd       	sbrc	r25, 6
     f30:	8f c0       	rjmp	.+286    	; 0x1050 <MPU401_EOIHandler+0x1b8>
     f32:	97 fd       	sbrc	r25, 7
     f34:	2e c0       	rjmp	.+92     	; 0xf92 <MPU401_EOIHandler+0xfa>
     f36:	08 95       	ret
     f38:	80 91 09 07 	lds	r24, 0x0709
     f3c:	e1 dc       	rcall	.-1598   	; 0x900 <UpdateTrack>
     f3e:	cf cf       	rjmp	.-98     	; 0xede <MPU401_EOIHandler+0x46>
     f40:	10 92 e3 06 	sts	0x06E3, r1
     f44:	10 92 ef 06 	sts	0x06EF, r1
     f48:	80 91 07 07 	lds	r24, 0x0707
     f4c:	90 91 08 07 	lds	r25, 0x0708
     f50:	9d 7f       	andi	r25, 0xFD	; 253
     f52:	90 93 08 07 	sts	0x0708, r25
     f56:	80 93 07 07 	sts	0x0707, r24
     f5a:	20 91 04 07 	lds	r18, 0x0704
     f5e:	21 11       	cpse	r18, r1
     f60:	be cf       	rjmp	.-132    	; 0xede <MPU401_EOIHandler+0x46>
     f62:	90 61       	ori	r25, 0x10	; 16
     f64:	90 93 08 07 	sts	0x0708, r25
     f68:	80 93 07 07 	sts	0x0707, r24
     f6c:	b8 cf       	rjmp	.-144    	; 0xede <MPU401_EOIHandler+0x46>
     f6e:	20 e0       	ldi	r18, 0x00	; 0
     f70:	30 e2       	ldi	r19, 0x20	; 32
     f72:	ad e0       	ldi	r26, 0x0D	; 13
     f74:	40 91 f2 06 	lds	r20, 0x06F2
     f78:	44 23       	and	r20, r20
     f7a:	79 f0       	breq	.+30     	; 0xf9a <MPU401_EOIHandler+0x102>
     f7c:	10 92 f2 06 	sts	0x06F2, r1
     f80:	20 95       	com	r18
     f82:	30 95       	com	r19
     f84:	28 23       	and	r18, r24
     f86:	39 23       	and	r19, r25
     f88:	30 93 08 07 	sts	0x0708, r19
     f8c:	20 93 07 07 	sts	0x0707, r18
     f90:	08 95       	ret
     f92:	20 e0       	ldi	r18, 0x00	; 0
     f94:	30 e8       	ldi	r19, 0x80	; 128
     f96:	af e0       	ldi	r26, 0x0F	; 15
     f98:	ed cf       	rjmp	.-38     	; 0xf74 <MPU401_EOIHandler+0xdc>
     f9a:	40 91 6f 06 	lds	r20, 0x066F
     f9e:	50 91 70 06 	lds	r21, 0x0670
     fa2:	40 32       	cpi	r20, 0x20	; 32
     fa4:	51 05       	cpc	r21, r1
     fa6:	60 f7       	brcc	.-40     	; 0xf80 <MPU401_EOIHandler+0xe8>
     fa8:	e0 91 6d 06 	lds	r30, 0x066D
     fac:	f0 91 6e 06 	lds	r31, 0x066E
     fb0:	bf 01       	movw	r22, r30
     fb2:	64 0f       	add	r22, r20
     fb4:	75 1f       	adc	r23, r21
     fb6:	e0 32       	cpi	r30, 0x20	; 32
     fb8:	f1 05       	cpc	r31, r1
     fba:	28 f0       	brcs	.+10     	; 0xfc6 <MPU401_EOIHandler+0x12e>
     fbc:	b0 97       	sbiw	r30, 0x20	; 32
     fbe:	f0 93 6e 06 	sts	0x066E, r31
     fc2:	e0 93 6d 06 	sts	0x066D, r30
     fc6:	60 32       	cpi	r22, 0x20	; 32
     fc8:	71 05       	cpc	r23, r1
     fca:	10 f0       	brcs	.+4      	; 0xfd0 <MPU401_EOIHandler+0x138>
     fcc:	60 52       	subi	r22, 0x20	; 32
     fce:	71 09       	sbc	r23, r1
     fd0:	4f 5f       	subi	r20, 0xFF	; 255
     fd2:	5f 4f       	sbci	r21, 0xFF	; 255
     fd4:	50 93 70 06 	sts	0x0670, r21
     fd8:	40 93 6f 06 	sts	0x066F, r20
     fdc:	fb 01       	movw	r30, r22
     fde:	e6 5b       	subi	r30, 0xB6	; 182
     fe0:	f9 4f       	sbci	r31, 0xF9	; 249
     fe2:	a0 51       	subi	r26, 0x10	; 16
     fe4:	a3 83       	std	Z+3, r26	; 0x03
     fe6:	cc cf       	rjmp	.-104    	; 0xf80 <MPU401_EOIHandler+0xe8>
     fe8:	21 e0       	ldi	r18, 0x01	; 1
     fea:	30 e0       	ldi	r19, 0x00	; 0
     fec:	a0 e0       	ldi	r26, 0x00	; 0
     fee:	c2 cf       	rjmp	.-124    	; 0xf74 <MPU401_EOIHandler+0xdc>
     ff0:	22 e0       	ldi	r18, 0x02	; 2
     ff2:	30 e0       	ldi	r19, 0x00	; 0
     ff4:	a1 e0       	ldi	r26, 0x01	; 1
     ff6:	be cf       	rjmp	.-132    	; 0xf74 <MPU401_EOIHandler+0xdc>
     ff8:	24 e0       	ldi	r18, 0x04	; 4
     ffa:	30 e0       	ldi	r19, 0x00	; 0
     ffc:	a2 e0       	ldi	r26, 0x02	; 2
     ffe:	ba cf       	rjmp	.-140    	; 0xf74 <MPU401_EOIHandler+0xdc>
    1000:	28 e0       	ldi	r18, 0x08	; 8
    1002:	30 e0       	ldi	r19, 0x00	; 0
    1004:	a3 e0       	ldi	r26, 0x03	; 3
    1006:	b6 cf       	rjmp	.-148    	; 0xf74 <MPU401_EOIHandler+0xdc>
    1008:	20 e1       	ldi	r18, 0x10	; 16
    100a:	30 e0       	ldi	r19, 0x00	; 0
    100c:	a4 e0       	ldi	r26, 0x04	; 4
    100e:	b2 cf       	rjmp	.-156    	; 0xf74 <MPU401_EOIHandler+0xdc>
    1010:	20 e2       	ldi	r18, 0x20	; 32
    1012:	30 e0       	ldi	r19, 0x00	; 0
    1014:	a5 e0       	ldi	r26, 0x05	; 5
    1016:	ae cf       	rjmp	.-164    	; 0xf74 <MPU401_EOIHandler+0xdc>
    1018:	20 e4       	ldi	r18, 0x40	; 64
    101a:	30 e0       	ldi	r19, 0x00	; 0
    101c:	a6 e0       	ldi	r26, 0x06	; 6
    101e:	aa cf       	rjmp	.-172    	; 0xf74 <MPU401_EOIHandler+0xdc>
    1020:	20 e8       	ldi	r18, 0x80	; 128
    1022:	30 e0       	ldi	r19, 0x00	; 0
    1024:	a7 e0       	ldi	r26, 0x07	; 7
    1026:	a6 cf       	rjmp	.-180    	; 0xf74 <MPU401_EOIHandler+0xdc>
    1028:	20 e0       	ldi	r18, 0x00	; 0
    102a:	31 e0       	ldi	r19, 0x01	; 1
    102c:	a8 e0       	ldi	r26, 0x08	; 8
    102e:	a2 cf       	rjmp	.-188    	; 0xf74 <MPU401_EOIHandler+0xdc>
    1030:	20 e0       	ldi	r18, 0x00	; 0
    1032:	32 e0       	ldi	r19, 0x02	; 2
    1034:	a9 e0       	ldi	r26, 0x09	; 9
    1036:	9e cf       	rjmp	.-196    	; 0xf74 <MPU401_EOIHandler+0xdc>
    1038:	20 e0       	ldi	r18, 0x00	; 0
    103a:	34 e0       	ldi	r19, 0x04	; 4
    103c:	aa e0       	ldi	r26, 0x0A	; 10
    103e:	9a cf       	rjmp	.-204    	; 0xf74 <MPU401_EOIHandler+0xdc>
    1040:	20 e0       	ldi	r18, 0x00	; 0
    1042:	38 e0       	ldi	r19, 0x08	; 8
    1044:	ab e0       	ldi	r26, 0x0B	; 11
    1046:	96 cf       	rjmp	.-212    	; 0xf74 <MPU401_EOIHandler+0xdc>
    1048:	20 e0       	ldi	r18, 0x00	; 0
    104a:	30 e1       	ldi	r19, 0x10	; 16
    104c:	ac e0       	ldi	r26, 0x0C	; 12
    104e:	92 cf       	rjmp	.-220    	; 0xf74 <MPU401_EOIHandler+0xdc>
    1050:	20 e0       	ldi	r18, 0x00	; 0
    1052:	30 e4       	ldi	r19, 0x40	; 64
    1054:	ae e0       	ldi	r26, 0x0E	; 14
    1056:	8e cf       	rjmp	.-228    	; 0xf74 <MPU401_EOIHandler+0xdc>

00001058 <MPU401_EOIHandlerDispatch>:
    1058:	80 91 fa 06 	lds	r24, 0x06FA
    105c:	81 11       	cpse	r24, r1
    105e:	05 c0       	rjmp	.+10     	; 0x106a <MPU401_EOIHandlerDispatch+0x12>
    1060:	80 91 fb 06 	lds	r24, 0x06FB
    1064:	81 11       	cpse	r24, r1
    1066:	08 95       	ret
    1068:	17 cf       	rjmp	.-466    	; 0xe98 <MPU401_EOIHandler>
    106a:	81 e0       	ldi	r24, 0x01	; 1
    106c:	80 93 fb 06 	sts	0x06FB, r24
    1070:	61 e0       	ldi	r22, 0x01	; 1
    1072:	70 e0       	ldi	r23, 0x00	; 0
    1074:	82 e0       	ldi	r24, 0x02	; 2
    1076:	6c c4       	rjmp	.+2264   	; 0x1950 <PIC_AddEvent>

00001078 <MPU401_Event>:
    1078:	80 91 4c 06 	lds	r24, 0x064C
    107c:	88 23       	and	r24, r24
    107e:	89 f0       	breq	.+34     	; 0x10a2 <MPU401_Event+0x2a>
    1080:	80 91 f9 06 	lds	r24, 0x06F9
    1084:	88 23       	and	r24, r24
    1086:	71 f0       	breq	.+28     	; 0x10a4 <MPU401_Event+0x2c>
    1088:	80 e0       	ldi	r24, 0x00	; 0
    108a:	90 d4       	rcall	.+2336   	; 0x19ac <PIC_RemoveEvents>
    108c:	60 91 0d 07 	lds	r22, 0x070D
    1090:	80 91 0b 07 	lds	r24, 0x070B
    1094:	68 9f       	mul	r22, r24
    1096:	b0 01       	movw	r22, r0
    1098:	11 24       	eor	r1, r1
    109a:	61 15       	cp	r22, r1
    109c:	71 05       	cpc	r23, r1
    109e:	09 f0       	breq	.+2      	; 0x10a2 <MPU401_Event+0x2a>
    10a0:	bd c0       	rjmp	.+378    	; 0x121c <MPU401_Event+0x1a4>
    10a2:	08 95       	ret
    10a4:	80 91 04 07 	lds	r24, 0x0704
    10a8:	80 ff       	sbrs	r24, 0
    10aa:	0e c0       	rjmp	.+28     	; 0x10c8 <MPU401_Event+0x50>
    10ac:	20 91 71 06 	lds	r18, 0x0671
    10b0:	30 91 72 06 	lds	r19, 0x0672
    10b4:	21 50       	subi	r18, 0x01	; 1
    10b6:	31 09       	sbc	r19, r1
    10b8:	30 93 72 06 	sts	0x0672, r19
    10bc:	20 93 71 06 	sts	0x0671, r18
    10c0:	12 16       	cp	r1, r18
    10c2:	13 06       	cpc	r1, r19
    10c4:	0c f0       	brlt	.+2      	; 0x10c8 <MPU401_Event+0x50>
    10c6:	af c0       	rjmp	.+350    	; 0x1226 <MPU401_Event+0x1ae>
    10c8:	81 ff       	sbrs	r24, 1
    10ca:	0e c0       	rjmp	.+28     	; 0x10e8 <MPU401_Event+0x70>
    10cc:	20 91 7f 06 	lds	r18, 0x067F
    10d0:	30 91 80 06 	lds	r19, 0x0680
    10d4:	21 50       	subi	r18, 0x01	; 1
    10d6:	31 09       	sbc	r19, r1
    10d8:	30 93 80 06 	sts	0x0680, r19
    10dc:	20 93 7f 06 	sts	0x067F, r18
    10e0:	12 16       	cp	r1, r18
    10e2:	13 06       	cpc	r1, r19
    10e4:	0c f0       	brlt	.+2      	; 0x10e8 <MPU401_Event+0x70>
    10e6:	a4 c0       	rjmp	.+328    	; 0x1230 <MPU401_Event+0x1b8>
    10e8:	82 ff       	sbrs	r24, 2
    10ea:	0e c0       	rjmp	.+28     	; 0x1108 <MPU401_Event+0x90>
    10ec:	20 91 8d 06 	lds	r18, 0x068D
    10f0:	30 91 8e 06 	lds	r19, 0x068E
    10f4:	21 50       	subi	r18, 0x01	; 1
    10f6:	31 09       	sbc	r19, r1
    10f8:	30 93 8e 06 	sts	0x068E, r19
    10fc:	20 93 8d 06 	sts	0x068D, r18
    1100:	12 16       	cp	r1, r18
    1102:	13 06       	cpc	r1, r19
    1104:	0c f0       	brlt	.+2      	; 0x1108 <MPU401_Event+0x90>
    1106:	99 c0       	rjmp	.+306    	; 0x123a <MPU401_Event+0x1c2>
    1108:	83 ff       	sbrs	r24, 3
    110a:	0e c0       	rjmp	.+28     	; 0x1128 <MPU401_Event+0xb0>
    110c:	20 91 9b 06 	lds	r18, 0x069B
    1110:	30 91 9c 06 	lds	r19, 0x069C
    1114:	21 50       	subi	r18, 0x01	; 1
    1116:	31 09       	sbc	r19, r1
    1118:	30 93 9c 06 	sts	0x069C, r19
    111c:	20 93 9b 06 	sts	0x069B, r18
    1120:	12 16       	cp	r1, r18
    1122:	13 06       	cpc	r1, r19
    1124:	0c f0       	brlt	.+2      	; 0x1128 <MPU401_Event+0xb0>
    1126:	8e c0       	rjmp	.+284    	; 0x1244 <MPU401_Event+0x1cc>
    1128:	84 ff       	sbrs	r24, 4
    112a:	0e c0       	rjmp	.+28     	; 0x1148 <MPU401_Event+0xd0>
    112c:	20 91 a9 06 	lds	r18, 0x06A9
    1130:	30 91 aa 06 	lds	r19, 0x06AA
    1134:	21 50       	subi	r18, 0x01	; 1
    1136:	31 09       	sbc	r19, r1
    1138:	30 93 aa 06 	sts	0x06AA, r19
    113c:	20 93 a9 06 	sts	0x06A9, r18
    1140:	12 16       	cp	r1, r18
    1142:	13 06       	cpc	r1, r19
    1144:	0c f0       	brlt	.+2      	; 0x1148 <MPU401_Event+0xd0>
    1146:	83 c0       	rjmp	.+262    	; 0x124e <MPU401_Event+0x1d6>
    1148:	85 ff       	sbrs	r24, 5
    114a:	0e c0       	rjmp	.+28     	; 0x1168 <MPU401_Event+0xf0>
    114c:	20 91 b7 06 	lds	r18, 0x06B7
    1150:	30 91 b8 06 	lds	r19, 0x06B8
    1154:	21 50       	subi	r18, 0x01	; 1
    1156:	31 09       	sbc	r19, r1
    1158:	30 93 b8 06 	sts	0x06B8, r19
    115c:	20 93 b7 06 	sts	0x06B7, r18
    1160:	12 16       	cp	r1, r18
    1162:	13 06       	cpc	r1, r19
    1164:	0c f0       	brlt	.+2      	; 0x1168 <MPU401_Event+0xf0>
    1166:	78 c0       	rjmp	.+240    	; 0x1258 <MPU401_Event+0x1e0>
    1168:	86 ff       	sbrs	r24, 6
    116a:	0e c0       	rjmp	.+28     	; 0x1188 <MPU401_Event+0x110>
    116c:	20 91 c5 06 	lds	r18, 0x06C5
    1170:	30 91 c6 06 	lds	r19, 0x06C6
    1174:	21 50       	subi	r18, 0x01	; 1
    1176:	31 09       	sbc	r19, r1
    1178:	30 93 c6 06 	sts	0x06C6, r19
    117c:	20 93 c5 06 	sts	0x06C5, r18
    1180:	12 16       	cp	r1, r18
    1182:	13 06       	cpc	r1, r19
    1184:	0c f0       	brlt	.+2      	; 0x1188 <MPU401_Event+0x110>
    1186:	6d c0       	rjmp	.+218    	; 0x1262 <MPU401_Event+0x1ea>
    1188:	90 e0       	ldi	r25, 0x00	; 0
    118a:	88 0f       	add	r24, r24
    118c:	89 2f       	mov	r24, r25
    118e:	88 1f       	adc	r24, r24
    1190:	99 0b       	sbc	r25, r25
    1192:	89 2b       	or	r24, r25
    1194:	69 f0       	breq	.+26     	; 0x11b0 <MPU401_Event+0x138>
    1196:	80 91 d3 06 	lds	r24, 0x06D3
    119a:	90 91 d4 06 	lds	r25, 0x06D4
    119e:	01 97       	sbiw	r24, 0x01	; 1
    11a0:	90 93 d4 06 	sts	0x06D4, r25
    11a4:	80 93 d3 06 	sts	0x06D3, r24
    11a8:	18 16       	cp	r1, r24
    11aa:	19 06       	cpc	r1, r25
    11ac:	0c f0       	brlt	.+2      	; 0x11b0 <MPU401_Event+0x138>
    11ae:	5e c0       	rjmp	.+188    	; 0x126c <MPU401_Event+0x1f4>
    11b0:	80 91 ef 06 	lds	r24, 0x06EF
    11b4:	88 23       	and	r24, r24
    11b6:	69 f0       	breq	.+26     	; 0x11d2 <MPU401_Event+0x15a>
    11b8:	80 91 e1 06 	lds	r24, 0x06E1
    11bc:	90 91 e2 06 	lds	r25, 0x06E2
    11c0:	01 97       	sbiw	r24, 0x01	; 1
    11c2:	90 93 e2 06 	sts	0x06E2, r25
    11c6:	80 93 e1 06 	sts	0x06E1, r24
    11ca:	18 16       	cp	r1, r24
    11cc:	19 06       	cpc	r1, r25
    11ce:	0c f0       	brlt	.+2      	; 0x11d2 <MPU401_Event+0x15a>
    11d0:	50 c0       	rjmp	.+160    	; 0x1272 <MPU401_Event+0x1fa>
    11d2:	80 91 14 07 	lds	r24, 0x0714
    11d6:	88 23       	and	r24, r24
    11d8:	a1 f0       	breq	.+40     	; 0x1202 <MPU401_Event+0x18a>
    11da:	80 91 13 07 	lds	r24, 0x0713
    11de:	8f 5f       	subi	r24, 0xFF	; 255
    11e0:	80 93 13 07 	sts	0x0713, r24
    11e4:	90 91 12 07 	lds	r25, 0x0712
    11e8:	89 17       	cp	r24, r25
    11ea:	58 f0       	brcs	.+22     	; 0x1202 <MPU401_Event+0x18a>
    11ec:	10 92 13 07 	sts	0x0713, r1
    11f0:	80 91 07 07 	lds	r24, 0x0707
    11f4:	90 91 08 07 	lds	r25, 0x0708
    11f8:	90 62       	ori	r25, 0x20	; 32
    11fa:	90 93 08 07 	sts	0x0708, r25
    11fe:	80 93 07 07 	sts	0x0707, r24
    1202:	80 91 f9 06 	lds	r24, 0x06F9
    1206:	81 11       	cpse	r24, r1
    1208:	3f cf       	rjmp	.-386    	; 0x1088 <MPU401_Event+0x10>
    120a:	80 91 07 07 	lds	r24, 0x0707
    120e:	90 91 08 07 	lds	r25, 0x0708
    1212:	89 2b       	or	r24, r25
    1214:	09 f4       	brne	.+2      	; 0x1218 <MPU401_Event+0x1a0>
    1216:	38 cf       	rjmp	.-400    	; 0x1088 <MPU401_Event+0x10>
    1218:	3f de       	rcall	.-898    	; 0xe98 <MPU401_EOIHandler>
    121a:	36 cf       	rjmp	.-404    	; 0x1088 <MPU401_Event+0x10>
    121c:	80 e9       	ldi	r24, 0x90	; 144
    121e:	92 ee       	ldi	r25, 0xE2	; 226
    1220:	38 d4       	rcall	.+2160   	; 0x1a92 <__udivmodhi4>
    1222:	80 e0       	ldi	r24, 0x00	; 0
    1224:	95 c3       	rjmp	.+1834   	; 0x1950 <PIC_AddEvent>
    1226:	80 e0       	ldi	r24, 0x00	; 0
    1228:	6b db       	rcall	.-2346   	; 0x900 <UpdateTrack>
    122a:	80 91 04 07 	lds	r24, 0x0704
    122e:	4c cf       	rjmp	.-360    	; 0x10c8 <MPU401_Event+0x50>
    1230:	81 e0       	ldi	r24, 0x01	; 1
    1232:	66 db       	rcall	.-2356   	; 0x900 <UpdateTrack>
    1234:	80 91 04 07 	lds	r24, 0x0704
    1238:	57 cf       	rjmp	.-338    	; 0x10e8 <MPU401_Event+0x70>
    123a:	82 e0       	ldi	r24, 0x02	; 2
    123c:	61 db       	rcall	.-2366   	; 0x900 <UpdateTrack>
    123e:	80 91 04 07 	lds	r24, 0x0704
    1242:	62 cf       	rjmp	.-316    	; 0x1108 <MPU401_Event+0x90>
    1244:	83 e0       	ldi	r24, 0x03	; 3
    1246:	5c db       	rcall	.-2376   	; 0x900 <UpdateTrack>
    1248:	80 91 04 07 	lds	r24, 0x0704
    124c:	6d cf       	rjmp	.-294    	; 0x1128 <MPU401_Event+0xb0>
    124e:	84 e0       	ldi	r24, 0x04	; 4
    1250:	57 db       	rcall	.-2386   	; 0x900 <UpdateTrack>
    1252:	80 91 04 07 	lds	r24, 0x0704
    1256:	78 cf       	rjmp	.-272    	; 0x1148 <MPU401_Event+0xd0>
    1258:	85 e0       	ldi	r24, 0x05	; 5
    125a:	52 db       	rcall	.-2396   	; 0x900 <UpdateTrack>
    125c:	80 91 04 07 	lds	r24, 0x0704
    1260:	83 cf       	rjmp	.-250    	; 0x1168 <MPU401_Event+0xf0>
    1262:	86 e0       	ldi	r24, 0x06	; 6
    1264:	4d db       	rcall	.-2406   	; 0x900 <UpdateTrack>
    1266:	80 91 04 07 	lds	r24, 0x0704
    126a:	8e cf       	rjmp	.-228    	; 0x1188 <MPU401_Event+0x110>
    126c:	87 e0       	ldi	r24, 0x07	; 7
    126e:	48 db       	rcall	.-2416   	; 0x900 <UpdateTrack>
    1270:	9f cf       	rjmp	.-194    	; 0x11b0 <MPU401_Event+0x138>
    1272:	80 91 e3 06 	lds	r24, 0x06E3
    1276:	8c 3f       	cpi	r24, 0xFC	; 252
    1278:	91 f0       	breq	.+36     	; 0x129e <MPU401_Event+0x226>
    127a:	10 92 ec 06 	sts	0x06EC, r1
    127e:	80 ef       	ldi	r24, 0xF0	; 240
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	90 93 e2 06 	sts	0x06E2, r25
    1286:	80 93 e1 06 	sts	0x06E1, r24
    128a:	80 91 07 07 	lds	r24, 0x0707
    128e:	90 91 08 07 	lds	r25, 0x0708
    1292:	92 60       	ori	r25, 0x02	; 2
    1294:	90 93 08 07 	sts	0x0708, r25
    1298:	80 93 07 07 	sts	0x0707, r24
    129c:	9a cf       	rjmp	.-204    	; 0x11d2 <MPU401_Event+0x15a>
    129e:	10 92 e3 06 	sts	0x06E3, r1
    12a2:	10 92 ef 06 	sts	0x06EF, r1
    12a6:	80 91 07 07 	lds	r24, 0x0707
    12aa:	90 91 08 07 	lds	r25, 0x0708
    12ae:	9d 7f       	andi	r25, 0xFD	; 253
    12b0:	90 93 08 07 	sts	0x0708, r25
    12b4:	80 93 07 07 	sts	0x0707, r24
    12b8:	20 91 04 07 	lds	r18, 0x0704
    12bc:	21 11       	cpse	r18, r1
    12be:	89 cf       	rjmp	.-238    	; 0x11d2 <MPU401_Event+0x15a>
    12c0:	90 61       	ori	r25, 0x10	; 16
    12c2:	90 93 08 07 	sts	0x0708, r25
    12c6:	80 93 07 07 	sts	0x0707, r24
    12ca:	83 cf       	rjmp	.-250    	; 0x11d2 <MPU401_Event+0x15a>

000012cc <MPU401_WriteData>:
    12cc:	cf 93       	push	r28
    12ce:	c8 2f       	mov	r28, r24
    12d0:	80 91 4c 06 	lds	r24, 0x064C
    12d4:	88 23       	and	r24, r24
    12d6:	a1 f1       	breq	.+104    	; 0x1340 <MPU401_WriteData+0x74>
    12d8:	20 91 fe 06 	lds	r18, 0x06FE
    12dc:	30 91 ff 06 	lds	r19, 0x06FF
    12e0:	27 3e       	cpi	r18, 0xE7	; 231
    12e2:	31 05       	cpc	r19, r1
    12e4:	09 f4       	brne	.+2      	; 0x12e8 <MPU401_WriteData+0x1c>
    12e6:	97 c0       	rjmp	.+302    	; 0x1416 <MPU401_WriteData+0x14a>
    12e8:	e8 f0       	brcs	.+58     	; 0x1324 <MPU401_WriteData+0x58>
    12ea:	2d 3e       	cpi	r18, 0xED	; 237
    12ec:	31 05       	cpc	r19, r1
    12ee:	09 f4       	brne	.+2      	; 0x12f2 <MPU401_WriteData+0x26>
    12f0:	8b c0       	rjmp	.+278    	; 0x1408 <MPU401_WriteData+0x13c>
    12f2:	50 f1       	brcs	.+84     	; 0x1348 <MPU401_WriteData+0x7c>
    12f4:	2e 3e       	cpi	r18, 0xEE	; 238
    12f6:	31 05       	cpc	r19, r1
    12f8:	09 f4       	brne	.+2      	; 0x12fc <MPU401_WriteData+0x30>
    12fa:	77 c0       	rjmp	.+238    	; 0x13ea <MPU401_WriteData+0x11e>
    12fc:	2f 3e       	cpi	r18, 0xEF	; 239
    12fe:	31 05       	cpc	r19, r1
    1300:	c9 f4       	brne	.+50     	; 0x1334 <MPU401_WriteData+0x68>
    1302:	10 92 ff 06 	sts	0x06FF, r1
    1306:	10 92 fe 06 	sts	0x06FE, r1
    130a:	8c 2f       	mov	r24, r28
    130c:	90 e0       	ldi	r25, 0x00	; 0
    130e:	98 2f       	mov	r25, r24
    1310:	88 27       	eor	r24, r24
    1312:	20 91 05 07 	lds	r18, 0x0705
    1316:	82 2b       	or	r24, r18
    1318:	90 93 06 07 	sts	0x0706, r25
    131c:	80 93 05 07 	sts	0x0705, r24
    1320:	cf 91       	pop	r28
    1322:	08 95       	ret
    1324:	20 3e       	cpi	r18, 0xE0	; 224
    1326:	31 05       	cpc	r19, r1
    1328:	c9 f0       	breq	.+50     	; 0x135c <MPU401_WriteData+0x90>
    132a:	21 3e       	cpi	r18, 0xE1	; 225
    132c:	31 05       	cpc	r19, r1
    132e:	11 f0       	breq	.+4      	; 0x1334 <MPU401_WriteData+0x68>
    1330:	23 2b       	or	r18, r19
    1332:	d9 f0       	breq	.+54     	; 0x136a <MPU401_WriteData+0x9e>
    1334:	10 92 ff 06 	sts	0x06FF, r1
    1338:	10 92 fe 06 	sts	0x06FE, r1
    133c:	cf 91       	pop	r28
    133e:	08 95       	ret
    1340:	8c 2f       	mov	r24, r28
    1342:	cf 91       	pop	r28
    1344:	0c 94 77 01 	jmp	0x2ee	; 0x2ee <MIDI_RawOutByte>
    1348:	2c 3e       	cpi	r18, 0xEC	; 236
    134a:	31 05       	cpc	r19, r1
    134c:	99 f7       	brne	.-26     	; 0x1334 <MPU401_WriteData+0x68>
    134e:	10 92 ff 06 	sts	0x06FF, r1
    1352:	10 92 fe 06 	sts	0x06FE, r1
    1356:	c0 93 02 07 	sts	0x0702, r28
    135a:	e2 cf       	rjmp	.-60     	; 0x1320 <MPU401_WriteData+0x54>
    135c:	10 92 ff 06 	sts	0x06FF, r1
    1360:	10 92 fe 06 	sts	0x06FE, r1
    1364:	c0 93 0d 07 	sts	0x070D, r28
    1368:	db cf       	rjmp	.-74     	; 0x1320 <MPU401_WriteData+0x54>
    136a:	80 91 f5 06 	lds	r24, 0x06F5
    136e:	81 11       	cpse	r24, r1
    1370:	5b c0       	rjmp	.+182    	; 0x1428 <MPU401_WriteData+0x15c>
    1372:	80 91 f6 06 	lds	r24, 0x06F6
    1376:	88 23       	and	r24, r24
    1378:	09 f4       	brne	.+2      	; 0x137c <MPU401_WriteData+0xb0>
    137a:	a2 c0       	rjmp	.+324    	; 0x14c0 <MPU401_WriteData+0x1f4>
    137c:	c7 3f       	cpi	r28, 0xF7	; 247
    137e:	09 f4       	brne	.+2      	; 0x1382 <MPU401_WriteData+0xb6>
    1380:	ac c1       	rjmp	.+856    	; 0x16da <MPU401_WriteData+0x40e>
    1382:	80 91 f7 06 	lds	r24, 0x06F7
    1386:	88 23       	and	r24, r24
    1388:	09 f4       	brne	.+2      	; 0x138c <MPU401_WriteData+0xc0>
    138a:	27 c1       	rjmp	.+590    	; 0x15da <MPU401_WriteData+0x30e>
    138c:	10 92 f7 06 	sts	0x06F7, r1
    1390:	10 92 49 06 	sts	0x0649, r1
    1394:	10 92 48 06 	sts	0x0648, r1
    1398:	c2 3f       	cpi	r28, 0xF2	; 242
    139a:	09 f4       	brne	.+2      	; 0x139e <MPU401_WriteData+0xd2>
    139c:	97 c1       	rjmp	.+814    	; 0x16cc <MPU401_WriteData+0x400>
    139e:	08 f4       	brcc	.+2      	; 0x13a2 <MPU401_WriteData+0xd6>
    13a0:	3d c1       	rjmp	.+634    	; 0x161c <MPU401_WriteData+0x350>
    13a2:	c3 3f       	cpi	r28, 0xF3	; 243
    13a4:	09 f4       	brne	.+2      	; 0x13a8 <MPU401_WriteData+0xdc>
    13a6:	8b c1       	rjmp	.+790    	; 0x16be <MPU401_WriteData+0x3f2>
    13a8:	c6 3f       	cpi	r28, 0xF6	; 246
    13aa:	09 f0       	breq	.+2      	; 0x13ae <MPU401_WriteData+0xe2>
    13ac:	37 c1       	rjmp	.+622    	; 0x161c <MPU401_WriteData+0x350>
    13ae:	81 e0       	ldi	r24, 0x01	; 1
    13b0:	90 e0       	ldi	r25, 0x00	; 0
    13b2:	90 93 47 06 	sts	0x0647, r25
    13b6:	80 93 46 06 	sts	0x0646, r24
    13ba:	8c 2f       	mov	r24, r28
    13bc:	0e 94 77 01 	call	0x2ee	; 0x2ee <MIDI_RawOutByte>
    13c0:	80 91 48 06 	lds	r24, 0x0648
    13c4:	90 91 49 06 	lds	r25, 0x0649
    13c8:	01 96       	adiw	r24, 0x01	; 1
    13ca:	90 93 49 06 	sts	0x0649, r25
    13ce:	80 93 48 06 	sts	0x0648, r24
    13d2:	40 91 46 06 	lds	r20, 0x0646
    13d6:	50 91 47 06 	lds	r21, 0x0647
    13da:	9c 01       	movw	r18, r24
    13dc:	42 17       	cp	r20, r18
    13de:	53 07       	cpc	r21, r19
    13e0:	09 f0       	breq	.+2      	; 0x13e4 <MPU401_WriteData+0x118>
    13e2:	9e cf       	rjmp	.-196    	; 0x1320 <MPU401_WriteData+0x54>
    13e4:	10 92 f6 06 	sts	0x06F6, r1
    13e8:	9b cf       	rjmp	.-202    	; 0x1320 <MPU401_WriteData+0x54>
    13ea:	10 92 ff 06 	sts	0x06FF, r1
    13ee:	10 92 fe 06 	sts	0x06FE, r1
    13f2:	20 91 05 07 	lds	r18, 0x0705
    13f6:	30 91 06 07 	lds	r19, 0x0706
    13fa:	22 27       	eor	r18, r18
    13fc:	2c 2b       	or	r18, r28
    13fe:	30 93 06 07 	sts	0x0706, r19
    1402:	20 93 05 07 	sts	0x0705, r18
    1406:	8c cf       	rjmp	.-232    	; 0x1320 <MPU401_WriteData+0x54>
    1408:	10 92 ff 06 	sts	0x06FF, r1
    140c:	10 92 fe 06 	sts	0x06FE, r1
    1410:	c0 93 03 07 	sts	0x0703, r28
    1414:	85 cf       	rjmp	.-246    	; 0x1320 <MPU401_WriteData+0x54>
    1416:	10 92 ff 06 	sts	0x06FF, r1
    141a:	10 92 fe 06 	sts	0x06FE, r1
    141e:	c6 95       	lsr	r28
    1420:	c6 95       	lsr	r28
    1422:	c0 93 12 07 	sts	0x0712, r28
    1426:	7c cf       	rjmp	.-264    	; 0x1320 <MPU401_WriteData+0x54>
    1428:	80 91 f7 06 	lds	r24, 0x06F7
    142c:	88 23       	and	r24, r24
    142e:	b9 f1       	breq	.+110    	; 0x149e <MPU401_WriteData+0x1d2>
    1430:	10 92 f7 06 	sts	0x06F7, r1
    1434:	10 92 49 06 	sts	0x0649, r1
    1438:	10 92 48 06 	sts	0x0648, r1
    143c:	8c 2f       	mov	r24, r28
    143e:	80 7f       	andi	r24, 0xF0	; 240
    1440:	80 3b       	cpi	r24, 0xB0	; 176
    1442:	09 f4       	brne	.+2      	; 0x1446 <MPU401_WriteData+0x17a>
    1444:	db c0       	rjmp	.+438    	; 0x15fc <MPU401_WriteData+0x330>
    1446:	88 f0       	brcs	.+34     	; 0x146a <MPU401_WriteData+0x19e>
    1448:	80 3d       	cpi	r24, 0xD0	; 208
    144a:	09 f4       	brne	.+2      	; 0x144e <MPU401_WriteData+0x182>
    144c:	67 c0       	rjmp	.+206    	; 0x151c <MPU401_WriteData+0x250>
    144e:	08 f4       	brcc	.+2      	; 0x1452 <MPU401_WriteData+0x186>
    1450:	62 c0       	rjmp	.+196    	; 0x1516 <MPU401_WriteData+0x24a>
    1452:	80 3e       	cpi	r24, 0xE0	; 224
    1454:	09 f4       	brne	.+2      	; 0x1458 <MPU401_WriteData+0x18c>
    1456:	d2 c0       	rjmp	.+420    	; 0x15fc <MPU401_WriteData+0x330>
    1458:	80 3f       	cpi	r24, 0xF0	; 240
    145a:	81 f4       	brne	.+32     	; 0x147c <MPU401_WriteData+0x1b0>
    145c:	10 92 f5 06 	sts	0x06F5, r1
    1460:	80 91 0a 07 	lds	r24, 0x070A
    1464:	80 93 09 07 	sts	0x0709, r24
    1468:	5b cf       	rjmp	.-330    	; 0x1320 <MPU401_WriteData+0x54>
    146a:	80 39       	cpi	r24, 0x90	; 144
    146c:	09 f4       	brne	.+2      	; 0x1470 <MPU401_WriteData+0x1a4>
    146e:	c6 c0       	rjmp	.+396    	; 0x15fc <MPU401_WriteData+0x330>
    1470:	80 3a       	cpi	r24, 0xA0	; 160
    1472:	09 f4       	brne	.+2      	; 0x1476 <MPU401_WriteData+0x1aa>
    1474:	c3 c0       	rjmp	.+390    	; 0x15fc <MPU401_WriteData+0x330>
    1476:	80 38       	cpi	r24, 0x80	; 128
    1478:	09 f4       	brne	.+2      	; 0x147c <MPU401_WriteData+0x1b0>
    147a:	c0 c0       	rjmp	.+384    	; 0x15fc <MPU401_WriteData+0x330>
    147c:	81 e0       	ldi	r24, 0x01	; 1
    147e:	90 e0       	ldi	r25, 0x00	; 0
    1480:	90 93 49 06 	sts	0x0649, r25
    1484:	80 93 48 06 	sts	0x0648, r24
    1488:	e0 91 09 07 	lds	r30, 0x0709
    148c:	8e e0       	ldi	r24, 0x0E	; 14
    148e:	e8 9f       	mul	r30, r24
    1490:	f0 01       	movw	r30, r0
    1492:	11 24       	eor	r1, r1
    1494:	e6 5b       	subi	r30, 0xB6	; 182
    1496:	f9 4f       	sbci	r31, 0xF9	; 249
    1498:	81 a5       	ldd	r24, Z+41	; 0x29
    149a:	0e 94 77 01 	call	0x2ee	; 0x2ee <MIDI_RawOutByte>
    149e:	20 91 48 06 	lds	r18, 0x0648
    14a2:	30 91 49 06 	lds	r19, 0x0649
    14a6:	40 91 46 06 	lds	r20, 0x0646
    14aa:	50 91 47 06 	lds	r21, 0x0647
    14ae:	24 17       	cp	r18, r20
    14b0:	35 07       	cpc	r19, r21
    14b2:	08 f4       	brcc	.+2      	; 0x14b6 <MPU401_WriteData+0x1ea>
    14b4:	42 c0       	rjmp	.+132    	; 0x153a <MPU401_WriteData+0x26e>
    14b6:	42 17       	cp	r20, r18
    14b8:	53 07       	cpc	r21, r19
    14ba:	09 f0       	breq	.+2      	; 0x14be <MPU401_WriteData+0x1f2>
    14bc:	31 cf       	rjmp	.-414    	; 0x1320 <MPU401_WriteData+0x54>
    14be:	ce cf       	rjmp	.-100    	; 0x145c <MPU401_WriteData+0x190>
    14c0:	80 91 f0 06 	lds	r24, 0x06F0
    14c4:	20 91 fc 06 	lds	r18, 0x06FC
    14c8:	30 91 fd 06 	lds	r19, 0x06FD
    14cc:	88 23       	and	r24, r24
    14ce:	09 f4       	brne	.+2      	; 0x14d2 <MPU401_WriteData+0x206>
    14d0:	46 c0       	rjmp	.+140    	; 0x155e <MPU401_WriteData+0x292>
    14d2:	21 30       	cpi	r18, 0x01	; 1
    14d4:	31 05       	cpc	r19, r1
    14d6:	09 f4       	brne	.+2      	; 0x14da <MPU401_WriteData+0x20e>
    14d8:	c1 c0       	rjmp	.+386    	; 0x165c <MPU401_WriteData+0x390>
    14da:	22 30       	cpi	r18, 0x02	; 2
    14dc:	31 05       	cpc	r19, r1
    14de:	09 f4       	brne	.+2      	; 0x14e2 <MPU401_WriteData+0x216>
    14e0:	da c0       	rjmp	.+436    	; 0x1696 <MPU401_WriteData+0x3ca>
    14e2:	23 2b       	or	r18, r19
    14e4:	09 f0       	breq	.+2      	; 0x14e8 <MPU401_WriteData+0x21c>
    14e6:	1c cf       	rjmp	.-456    	; 0x1320 <MPU401_WriteData+0x54>
    14e8:	10 92 ec 06 	sts	0x06EC, r1
    14ec:	c0 3f       	cpi	r28, 0xF0	; 240
    14ee:	08 f0       	brcs	.+2      	; 0x14f2 <MPU401_WriteData+0x226>
    14f0:	fd c0       	rjmp	.+506    	; 0x16ec <MPU401_WriteData+0x420>
    14f2:	81 e0       	ldi	r24, 0x01	; 1
    14f4:	90 e0       	ldi	r25, 0x00	; 0
    14f6:	90 93 fd 06 	sts	0x06FD, r25
    14fa:	80 93 fc 06 	sts	0x06FC, r24
    14fe:	c1 11       	cpse	r28, r1
    1500:	fc c0       	rjmp	.+504    	; 0x16fa <MPU401_WriteData+0x42e>
    1502:	81 e0       	ldi	r24, 0x01	; 1
    1504:	80 93 fa 06 	sts	0x06FA, r24
    1508:	8c 2f       	mov	r24, r28
    150a:	90 e0       	ldi	r25, 0x00	; 0
    150c:	90 93 e2 06 	sts	0x06E2, r25
    1510:	80 93 e1 06 	sts	0x06E1, r24
    1514:	05 cf       	rjmp	.-502    	; 0x1320 <MPU401_WriteData+0x54>
    1516:	80 3c       	cpi	r24, 0xC0	; 192
    1518:	09 f0       	breq	.+2      	; 0x151c <MPU401_WriteData+0x250>
    151a:	b0 cf       	rjmp	.-160    	; 0x147c <MPU401_WriteData+0x1b0>
    151c:	e0 91 09 07 	lds	r30, 0x0709
    1520:	8e e0       	ldi	r24, 0x0E	; 14
    1522:	e8 9f       	mul	r30, r24
    1524:	f0 01       	movw	r30, r0
    1526:	11 24       	eor	r1, r1
    1528:	e6 5b       	subi	r30, 0xB6	; 182
    152a:	f9 4f       	sbci	r31, 0xF9	; 249
    152c:	c1 a7       	std	Z+41, r28	; 0x29
    152e:	82 e0       	ldi	r24, 0x02	; 2
    1530:	90 e0       	ldi	r25, 0x00	; 0
    1532:	90 93 47 06 	sts	0x0647, r25
    1536:	80 93 46 06 	sts	0x0646, r24
    153a:	8c 2f       	mov	r24, r28
    153c:	0e 94 77 01 	call	0x2ee	; 0x2ee <MIDI_RawOutByte>
    1540:	20 91 48 06 	lds	r18, 0x0648
    1544:	30 91 49 06 	lds	r19, 0x0649
    1548:	2f 5f       	subi	r18, 0xFF	; 255
    154a:	3f 4f       	sbci	r19, 0xFF	; 255
    154c:	30 93 49 06 	sts	0x0649, r19
    1550:	20 93 48 06 	sts	0x0648, r18
    1554:	40 91 46 06 	lds	r20, 0x0646
    1558:	50 91 47 06 	lds	r21, 0x0647
    155c:	ac cf       	rjmp	.-168    	; 0x14b6 <MPU401_WriteData+0x1ea>
    155e:	21 15       	cp	r18, r1
    1560:	31 05       	cpc	r19, r1
    1562:	09 f4       	brne	.+2      	; 0x1566 <MPU401_WriteData+0x29a>
    1564:	60 c0       	rjmp	.+192    	; 0x1626 <MPU401_WriteData+0x35a>
    1566:	21 30       	cpi	r18, 0x01	; 1
    1568:	31 05       	cpc	r19, r1
    156a:	09 f0       	breq	.+2      	; 0x156e <MPU401_WriteData+0x2a2>
    156c:	d9 ce       	rjmp	.-590    	; 0x1320 <MPU401_WriteData+0x54>
    156e:	60 91 09 07 	lds	r22, 0x0709
    1572:	70 e0       	ldi	r23, 0x00	; 0
    1574:	cb 01       	movw	r24, r22
    1576:	88 0f       	add	r24, r24
    1578:	99 1f       	adc	r25, r25
    157a:	fc 01       	movw	r30, r24
    157c:	ee 0f       	add	r30, r30
    157e:	ff 1f       	adc	r31, r31
    1580:	ee 0f       	add	r30, r30
    1582:	ff 1f       	adc	r31, r31
    1584:	ee 0f       	add	r30, r30
    1586:	ff 1f       	adc	r31, r31
    1588:	e8 1b       	sub	r30, r24
    158a:	f9 0b       	sbc	r31, r25
    158c:	e6 5b       	subi	r30, 0xB6	; 182
    158e:	f9 4f       	sbci	r31, 0xF9	; 249
    1590:	a2 a9       	ldd	r26, Z+50	; 0x32
    1592:	41 e0       	ldi	r20, 0x01	; 1
    1594:	4a 0f       	add	r20, r26
    1596:	42 ab       	std	Z+50, r20	; 0x32
    1598:	50 e0       	ldi	r21, 0x00	; 0
    159a:	50 93 45 06 	sts	0x0645, r21
    159e:	40 93 44 06 	sts	0x0644, r20
    15a2:	41 30       	cpi	r20, 0x01	; 1
    15a4:	51 05       	cpc	r21, r1
    15a6:	09 f4       	brne	.+2      	; 0x15aa <MPU401_WriteData+0x2de>
    15a8:	ab c0       	rjmp	.+342    	; 0x1700 <MPU401_WriteData+0x434>
    15aa:	fc 01       	movw	r30, r24
    15ac:	ee 0f       	add	r30, r30
    15ae:	ff 1f       	adc	r31, r31
    15b0:	ee 0f       	add	r30, r30
    15b2:	ff 1f       	adc	r31, r31
    15b4:	ee 0f       	add	r30, r30
    15b6:	ff 1f       	adc	r31, r31
    15b8:	e8 1b       	sub	r30, r24
    15ba:	f9 0b       	sbc	r31, r25
    15bc:	e6 5b       	subi	r30, 0xB6	; 182
    15be:	f9 4f       	sbci	r31, 0xF9	; 249
    15c0:	e4 0f       	add	r30, r20
    15c2:	f5 1f       	adc	r31, r21
    15c4:	c0 a7       	std	Z+40, r28	; 0x28
    15c6:	80 91 46 06 	lds	r24, 0x0646
    15ca:	90 91 47 06 	lds	r25, 0x0647
    15ce:	48 17       	cp	r20, r24
    15d0:	59 07       	cpc	r21, r25
    15d2:	09 f0       	breq	.+2      	; 0x15d6 <MPU401_WriteData+0x30a>
    15d4:	a5 ce       	rjmp	.-694    	; 0x1320 <MPU401_WriteData+0x54>
    15d6:	cf 91       	pop	r28
    15d8:	3f cd       	rjmp	.-1410   	; 0x1058 <MPU401_EOIHandlerDispatch>
    15da:	40 91 46 06 	lds	r20, 0x0646
    15de:	50 91 47 06 	lds	r21, 0x0647
    15e2:	41 15       	cp	r20, r1
    15e4:	51 05       	cpc	r21, r1
    15e6:	09 f4       	brne	.+2      	; 0x15ea <MPU401_WriteData+0x31e>
    15e8:	e8 ce       	rjmp	.-560    	; 0x13ba <MPU401_WriteData+0xee>
    15ea:	20 91 48 06 	lds	r18, 0x0648
    15ee:	30 91 49 06 	lds	r19, 0x0649
    15f2:	24 17       	cp	r18, r20
    15f4:	35 07       	cpc	r19, r21
    15f6:	08 f0       	brcs	.+2      	; 0x15fa <MPU401_WriteData+0x32e>
    15f8:	f1 ce       	rjmp	.-542    	; 0x13dc <MPU401_WriteData+0x110>
    15fa:	df ce       	rjmp	.-578    	; 0x13ba <MPU401_WriteData+0xee>
    15fc:	e0 91 09 07 	lds	r30, 0x0709
    1600:	8e e0       	ldi	r24, 0x0E	; 14
    1602:	e8 9f       	mul	r30, r24
    1604:	f0 01       	movw	r30, r0
    1606:	11 24       	eor	r1, r1
    1608:	e6 5b       	subi	r30, 0xB6	; 182
    160a:	f9 4f       	sbci	r31, 0xF9	; 249
    160c:	c1 a7       	std	Z+41, r28	; 0x29
    160e:	83 e0       	ldi	r24, 0x03	; 3
    1610:	90 e0       	ldi	r25, 0x00	; 0
    1612:	90 93 47 06 	sts	0x0647, r25
    1616:	80 93 46 06 	sts	0x0646, r24
    161a:	8f cf       	rjmp	.-226    	; 0x153a <MPU401_WriteData+0x26e>
    161c:	10 92 47 06 	sts	0x0647, r1
    1620:	10 92 46 06 	sts	0x0646, r1
    1624:	ca ce       	rjmp	.-620    	; 0x13ba <MPU401_WriteData+0xee>
    1626:	c0 3f       	cpi	r28, 0xF0	; 240
    1628:	08 f0       	brcs	.+2      	; 0x162c <MPU401_WriteData+0x360>
    162a:	60 c0       	rjmp	.+192    	; 0x16ec <MPU401_WriteData+0x420>
    162c:	81 e0       	ldi	r24, 0x01	; 1
    162e:	90 e0       	ldi	r25, 0x00	; 0
    1630:	90 93 fd 06 	sts	0x06FD, r25
    1634:	80 93 fc 06 	sts	0x06FC, r24
    1638:	c1 11       	cpse	r28, r1
    163a:	55 c0       	rjmp	.+170    	; 0x16e6 <MPU401_WriteData+0x41a>
    163c:	81 e0       	ldi	r24, 0x01	; 1
    163e:	80 93 fa 06 	sts	0x06FA, r24
    1642:	e0 91 09 07 	lds	r30, 0x0709
    1646:	8e e0       	ldi	r24, 0x0E	; 14
    1648:	e8 9f       	mul	r30, r24
    164a:	f0 01       	movw	r30, r0
    164c:	11 24       	eor	r1, r1
    164e:	e6 5b       	subi	r30, 0xB6	; 182
    1650:	f9 4f       	sbci	r31, 0xF9	; 249
    1652:	8c 2f       	mov	r24, r28
    1654:	90 e0       	ldi	r25, 0x00	; 0
    1656:	90 a7       	std	Z+40, r25	; 0x28
    1658:	87 a3       	std	Z+39, r24	; 0x27
    165a:	62 ce       	rjmp	.-828    	; 0x1320 <MPU401_WriteData+0x54>
    165c:	88 e0       	ldi	r24, 0x08	; 8
    165e:	8c 0f       	add	r24, r28
    1660:	82 30       	cpi	r24, 0x02	; 2
    1662:	08 f4       	brcc	.+2      	; 0x1666 <MPU401_WriteData+0x39a>
    1664:	73 c0       	rjmp	.+230    	; 0x174c <MPU401_WriteData+0x480>
    1666:	84 e0       	ldi	r24, 0x04	; 4
    1668:	80 93 ee 06 	sts	0x06EE, r24
    166c:	80 91 ec 06 	lds	r24, 0x06EC
    1670:	e8 2f       	mov	r30, r24
    1672:	f0 e0       	ldi	r31, 0x00	; 0
    1674:	ed 51       	subi	r30, 0x1D	; 29
    1676:	f9 4f       	sbci	r31, 0xF9	; 249
    1678:	c0 83       	st	Z, r28
    167a:	8f 5f       	subi	r24, 0xFF	; 255
    167c:	80 93 ec 06 	sts	0x06EC, r24
    1680:	c0 7f       	andi	r28, 0xF0	; 240
    1682:	c0 3e       	cpi	r28, 0xE0	; 224
    1684:	09 f0       	breq	.+2      	; 0x1688 <MPU401_WriteData+0x3bc>
    1686:	a7 cf       	rjmp	.-178    	; 0x15d6 <MPU401_WriteData+0x30a>
    1688:	82 e0       	ldi	r24, 0x02	; 2
    168a:	90 e0       	ldi	r25, 0x00	; 0
    168c:	90 93 fd 06 	sts	0x06FD, r25
    1690:	80 93 fc 06 	sts	0x06FC, r24
    1694:	45 ce       	rjmp	.-886    	; 0x1320 <MPU401_WriteData+0x54>
    1696:	80 91 ec 06 	lds	r24, 0x06EC
    169a:	e8 2f       	mov	r30, r24
    169c:	f0 e0       	ldi	r31, 0x00	; 0
    169e:	ed 51       	subi	r30, 0x1D	; 29
    16a0:	f9 4f       	sbci	r31, 0xF9	; 249
    16a2:	c0 83       	st	Z, r28
    16a4:	8f 5f       	subi	r24, 0xFF	; 255
    16a6:	80 93 ec 06 	sts	0x06EC, r24
    16aa:	80 91 fa 06 	lds	r24, 0x06FA
    16ae:	81 11       	cpse	r24, r1
    16b0:	50 c0       	rjmp	.+160    	; 0x1752 <MPU401_WriteData+0x486>
    16b2:	80 91 fb 06 	lds	r24, 0x06FB
    16b6:	81 11       	cpse	r24, r1
    16b8:	33 ce       	rjmp	.-922    	; 0x1320 <MPU401_WriteData+0x54>
    16ba:	cf 91       	pop	r28
    16bc:	ed cb       	rjmp	.-2086   	; 0xe98 <MPU401_EOIHandler>
    16be:	82 e0       	ldi	r24, 0x02	; 2
    16c0:	90 e0       	ldi	r25, 0x00	; 0
    16c2:	90 93 47 06 	sts	0x0647, r25
    16c6:	80 93 46 06 	sts	0x0646, r24
    16ca:	77 ce       	rjmp	.-786    	; 0x13ba <MPU401_WriteData+0xee>
    16cc:	83 e0       	ldi	r24, 0x03	; 3
    16ce:	90 e0       	ldi	r25, 0x00	; 0
    16d0:	90 93 47 06 	sts	0x0647, r25
    16d4:	80 93 46 06 	sts	0x0646, r24
    16d8:	70 ce       	rjmp	.-800    	; 0x13ba <MPU401_WriteData+0xee>
    16da:	87 ef       	ldi	r24, 0xF7	; 247
    16dc:	0e 94 77 01 	call	0x2ee	; 0x2ee <MIDI_RawOutByte>
    16e0:	10 92 f6 06 	sts	0x06F6, r1
    16e4:	1d ce       	rjmp	.-966    	; 0x1320 <MPU401_WriteData+0x54>
    16e6:	10 92 fa 06 	sts	0x06FA, r1
    16ea:	ab cf       	rjmp	.-170    	; 0x1642 <MPU401_WriteData+0x376>
    16ec:	8f ef       	ldi	r24, 0xFF	; 255
    16ee:	9f ef       	ldi	r25, 0xFF	; 255
    16f0:	90 93 fd 06 	sts	0x06FD, r25
    16f4:	80 93 fc 06 	sts	0x06FC, r24
    16f8:	6e cf       	rjmp	.-292    	; 0x15d6 <MPU401_WriteData+0x30a>
    16fa:	10 92 fa 06 	sts	0x06FA, r1
    16fe:	04 cf       	rjmp	.-504    	; 0x1508 <MPU401_WriteData+0x23c>
    1700:	4c 2f       	mov	r20, r28
    1702:	40 7f       	andi	r20, 0xF0	; 240
    1704:	40 3b       	cpi	r20, 0xB0	; 176
    1706:	09 f4       	brne	.+2      	; 0x170a <MPU401_WriteData+0x43e>
    1708:	60 c0       	rjmp	.+192    	; 0x17ca <MPU401_WriteData+0x4fe>
    170a:	08 f4       	brcc	.+2      	; 0x170e <MPU401_WriteData+0x442>
    170c:	58 c0       	rjmp	.+176    	; 0x17be <MPU401_WriteData+0x4f2>
    170e:	40 3d       	cpi	r20, 0xD0	; 208
    1710:	09 f4       	brne	.+2      	; 0x1714 <MPU401_WriteData+0x448>
    1712:	42 c0       	rjmp	.+132    	; 0x1798 <MPU401_WriteData+0x4cc>
    1714:	30 f1       	brcs	.+76     	; 0x1762 <MPU401_WriteData+0x496>
    1716:	40 3e       	cpi	r20, 0xE0	; 224
    1718:	09 f4       	brne	.+2      	; 0x171c <MPU401_WriteData+0x450>
    171a:	57 c0       	rjmp	.+174    	; 0x17ca <MPU401_WriteData+0x4fe>
    171c:	40 3f       	cpi	r20, 0xF0	; 240
    171e:	19 f5       	brne	.+70     	; 0x1766 <MPU401_WriteData+0x49a>
    1720:	c8 3f       	cpi	r28, 0xF8	; 248
    1722:	08 f4       	brcc	.+2      	; 0x1726 <MPU401_WriteData+0x45a>
    1724:	64 c0       	rjmp	.+200    	; 0x17ee <MPU401_WriteData+0x522>
    1726:	41 e0       	ldi	r20, 0x01	; 1
    1728:	44 ab       	std	Z+52, r20	; 0x34
    172a:	c1 ab       	std	Z+49, r28	; 0x31
    172c:	30 93 47 06 	sts	0x0647, r19
    1730:	20 93 46 06 	sts	0x0646, r18
    1734:	40 91 44 06 	lds	r20, 0x0644
    1738:	50 91 45 06 	lds	r21, 0x0645
    173c:	41 30       	cpi	r20, 0x01	; 1
    173e:	51 05       	cpc	r21, r1
    1740:	09 f0       	breq	.+2      	; 0x1744 <MPU401_WriteData+0x478>
    1742:	33 cf       	rjmp	.-410    	; 0x15aa <MPU401_WriteData+0x2de>
    1744:	c0 3f       	cpi	r28, 0xF0	; 240
    1746:	08 f0       	brcs	.+2      	; 0x174a <MPU401_WriteData+0x47e>
    1748:	3e cf       	rjmp	.-388    	; 0x15c6 <MPU401_WriteData+0x2fa>
    174a:	2f cf       	rjmp	.-418    	; 0x15aa <MPU401_WriteData+0x2de>
    174c:	10 92 ee 06 	sts	0x06EE, r1
    1750:	8d cf       	rjmp	.-230    	; 0x166c <MPU401_WriteData+0x3a0>
    1752:	81 e0       	ldi	r24, 0x01	; 1
    1754:	80 93 fb 06 	sts	0x06FB, r24
    1758:	61 e0       	ldi	r22, 0x01	; 1
    175a:	70 e0       	ldi	r23, 0x00	; 0
    175c:	82 e0       	ldi	r24, 0x02	; 2
    175e:	cf 91       	pop	r28
    1760:	f7 c0       	rjmp	.+494    	; 0x1950 <PIC_AddEvent>
    1762:	40 3c       	cpi	r20, 0xC0	; 192
    1764:	c9 f0       	breq	.+50     	; 0x1798 <MPU401_WriteData+0x4cc>
    1766:	22 e0       	ldi	r18, 0x02	; 2
    1768:	30 e0       	ldi	r19, 0x00	; 0
    176a:	30 93 45 06 	sts	0x0645, r19
    176e:	20 93 44 06 	sts	0x0644, r18
    1772:	2e e0       	ldi	r18, 0x0E	; 14
    1774:	26 9f       	mul	r18, r22
    1776:	f0 01       	movw	r30, r0
    1778:	27 9f       	mul	r18, r23
    177a:	f0 0d       	add	r31, r0
    177c:	11 24       	eor	r1, r1
    177e:	e6 5b       	subi	r30, 0xB6	; 182
    1780:	f9 4f       	sbci	r31, 0xF9	; 249
    1782:	ae 5f       	subi	r26, 0xFE	; 254
    1784:	a2 ab       	std	Z+50, r26	; 0x32
    1786:	23 e0       	ldi	r18, 0x03	; 3
    1788:	24 ab       	std	Z+52, r18	; 0x34
    178a:	23 a9       	ldd	r18, Z+51	; 0x33
    178c:	30 e0       	ldi	r19, 0x00	; 0
    178e:	30 93 47 06 	sts	0x0647, r19
    1792:	20 93 46 06 	sts	0x0646, r18
    1796:	ce cf       	rjmp	.-100    	; 0x1734 <MPU401_WriteData+0x468>
    1798:	2e e0       	ldi	r18, 0x0E	; 14
    179a:	26 9f       	mul	r18, r22
    179c:	f0 01       	movw	r30, r0
    179e:	27 9f       	mul	r18, r23
    17a0:	f0 0d       	add	r31, r0
    17a2:	11 24       	eor	r1, r1
    17a4:	e6 5b       	subi	r30, 0xB6	; 182
    17a6:	f9 4f       	sbci	r31, 0xF9	; 249
    17a8:	23 e0       	ldi	r18, 0x03	; 3
    17aa:	24 ab       	std	Z+52, r18	; 0x34
    17ac:	22 e0       	ldi	r18, 0x02	; 2
    17ae:	23 ab       	std	Z+51, r18	; 0x33
    17b0:	22 e0       	ldi	r18, 0x02	; 2
    17b2:	30 e0       	ldi	r19, 0x00	; 0
    17b4:	30 93 47 06 	sts	0x0647, r19
    17b8:	20 93 46 06 	sts	0x0646, r18
    17bc:	bb cf       	rjmp	.-138    	; 0x1734 <MPU401_WriteData+0x468>
    17be:	40 39       	cpi	r20, 0x90	; 144
    17c0:	21 f0       	breq	.+8      	; 0x17ca <MPU401_WriteData+0x4fe>
    17c2:	40 3a       	cpi	r20, 0xA0	; 160
    17c4:	11 f0       	breq	.+4      	; 0x17ca <MPU401_WriteData+0x4fe>
    17c6:	40 38       	cpi	r20, 0x80	; 128
    17c8:	71 f6       	brne	.-100    	; 0x1766 <MPU401_WriteData+0x49a>
    17ca:	2e e0       	ldi	r18, 0x0E	; 14
    17cc:	26 9f       	mul	r18, r22
    17ce:	f0 01       	movw	r30, r0
    17d0:	27 9f       	mul	r18, r23
    17d2:	f0 0d       	add	r31, r0
    17d4:	11 24       	eor	r1, r1
    17d6:	e6 5b       	subi	r30, 0xB6	; 182
    17d8:	f9 4f       	sbci	r31, 0xF9	; 249
    17da:	23 e0       	ldi	r18, 0x03	; 3
    17dc:	24 ab       	std	Z+52, r18	; 0x34
    17de:	23 ab       	std	Z+51, r18	; 0x33
    17e0:	23 e0       	ldi	r18, 0x03	; 3
    17e2:	30 e0       	ldi	r19, 0x00	; 0
    17e4:	30 93 47 06 	sts	0x0647, r19
    17e8:	20 93 46 06 	sts	0x0646, r18
    17ec:	a3 cf       	rjmp	.-186    	; 0x1734 <MPU401_WriteData+0x468>
    17ee:	42 e0       	ldi	r20, 0x02	; 2
    17f0:	44 ab       	std	Z+52, r20	; 0x34
    17f2:	c1 ab       	std	Z+49, r28	; 0x31
    17f4:	30 93 47 06 	sts	0x0647, r19
    17f8:	20 93 46 06 	sts	0x0646, r18
    17fc:	9b cf       	rjmp	.-202    	; 0x1734 <MPU401_WriteData+0x468>

000017fe <MPU401_ReadData>:
    17fe:	cf 93       	push	r28
    1800:	20 91 6d 06 	lds	r18, 0x066D
    1804:	30 91 6e 06 	lds	r19, 0x066E
    1808:	20 32       	cpi	r18, 0x20	; 32
    180a:	31 05       	cpc	r19, r1
    180c:	10 f0       	brcs	.+4      	; 0x1812 <MPU401_ReadData+0x14>
    180e:	20 52       	subi	r18, 0x20	; 32
    1810:	31 09       	sbc	r19, r1
    1812:	f9 01       	movw	r30, r18
    1814:	e6 5b       	subi	r30, 0xB6	; 182
    1816:	f9 4f       	sbci	r31, 0xF9	; 249
    1818:	c3 81       	ldd	r28, Z+3	; 0x03
    181a:	2f 5f       	subi	r18, 0xFF	; 255
    181c:	3f 4f       	sbci	r19, 0xFF	; 255
    181e:	30 93 6e 06 	sts	0x066E, r19
    1822:	20 93 6d 06 	sts	0x066D, r18
    1826:	20 91 6f 06 	lds	r18, 0x066F
    182a:	30 91 70 06 	lds	r19, 0x0670
    182e:	21 50       	subi	r18, 0x01	; 1
    1830:	31 09       	sbc	r19, r1
    1832:	30 93 70 06 	sts	0x0670, r19
    1836:	20 93 6f 06 	sts	0x066F, r18
    183a:	80 91 4a 06 	lds	r24, 0x064A
    183e:	88 23       	and	r24, r24
    1840:	09 f1       	breq	.+66     	; 0x1884 <MPU401_ReadData+0x86>
    1842:	80 e1       	ldi	r24, 0x10	; 16
    1844:	8c 0f       	add	r24, r28
    1846:	88 30       	cpi	r24, 0x08	; 8
    1848:	00 f5       	brcc	.+64     	; 0x188a <MPU401_ReadData+0x8c>
    184a:	8c 2f       	mov	r24, r28
    184c:	87 70       	andi	r24, 0x07	; 7
    184e:	80 93 09 07 	sts	0x0709, r24
    1852:	10 92 fd 06 	sts	0x06FD, r1
    1856:	10 92 fc 06 	sts	0x06FC, r1
    185a:	10 92 f0 06 	sts	0x06F0, r1
    185e:	84 e0       	ldi	r24, 0x04	; 4
    1860:	8c 0f       	add	r24, r28
    1862:	83 30       	cpi	r24, 0x03	; 3
    1864:	78 f4       	brcc	.+30     	; 0x1884 <MPU401_ReadData+0x86>
    1866:	2f ef       	ldi	r18, 0xFF	; 255
    1868:	3f ef       	ldi	r19, 0xFF	; 255
    186a:	30 93 fd 06 	sts	0x06FD, r19
    186e:	20 93 fc 06 	sts	0x06FC, r18
    1872:	80 91 fa 06 	lds	r24, 0x06FA
    1876:	81 11       	cpse	r24, r1
    1878:	1a c0       	rjmp	.+52     	; 0x18ae <MPU401_ReadData+0xb0>
    187a:	80 91 fb 06 	lds	r24, 0x06FB
    187e:	81 11       	cpse	r24, r1
    1880:	01 c0       	rjmp	.+2      	; 0x1884 <MPU401_ReadData+0x86>
    1882:	0a db       	rcall	.-2540   	; 0xe98 <MPU401_EOIHandler>
    1884:	8c 2f       	mov	r24, r28
    1886:	cf 91       	pop	r28
    1888:	08 95       	ret
    188a:	c9 3f       	cpi	r28, 0xF9	; 249
    188c:	41 f7       	brne	.-48     	; 0x185e <MPU401_ReadData+0x60>
    188e:	10 92 fd 06 	sts	0x06FD, r1
    1892:	10 92 fc 06 	sts	0x06FC, r1
    1896:	81 e0       	ldi	r24, 0x01	; 1
    1898:	80 93 f0 06 	sts	0x06F0, r24
    189c:	90 91 ee 06 	lds	r25, 0x06EE
    18a0:	91 11       	cpse	r25, r1
    18a2:	0d c0       	rjmp	.+26     	; 0x18be <MPU401_ReadData+0xc0>
    18a4:	10 92 ee 06 	sts	0x06EE, r1
    18a8:	8c 2f       	mov	r24, r28
    18aa:	cf 91       	pop	r28
    18ac:	08 95       	ret
    18ae:	81 e0       	ldi	r24, 0x01	; 1
    18b0:	80 93 fb 06 	sts	0x06FB, r24
    18b4:	61 e0       	ldi	r22, 0x01	; 1
    18b6:	70 e0       	ldi	r23, 0x00	; 0
    18b8:	82 e0       	ldi	r24, 0x02	; 2
    18ba:	4a d0       	rcall	.+148    	; 0x1950 <PIC_AddEvent>
    18bc:	e3 cf       	rjmp	.-58     	; 0x1884 <MPU401_ReadData+0x86>
    18be:	80 93 f2 06 	sts	0x06F2, r24
    18c2:	80 91 e3 06 	lds	r24, 0x06E3
    18c6:	c3 d8       	rcall	.-3706   	; 0xa4e <MPU401_WriteCommand>
    18c8:	20 91 fe 06 	lds	r18, 0x06FE
    18cc:	30 91 ff 06 	lds	r19, 0x06FF
    18d0:	23 2b       	or	r18, r19
    18d2:	41 f3       	breq	.-48     	; 0x18a4 <MPU401_ReadData+0xa6>
    18d4:	80 91 e4 06 	lds	r24, 0x06E4
    18d8:	f9 dc       	rcall	.-1550   	; 0x12cc <MPU401_WriteData>
    18da:	e4 cf       	rjmp	.-56     	; 0x18a4 <MPU401_ReadData+0xa6>

000018dc <MPU401_ResetDone>:
    18dc:	10 92 f4 06 	sts	0x06F4, r1
    18e0:	80 91 00 07 	lds	r24, 0x0700
    18e4:	90 91 01 07 	lds	r25, 0x0701
    18e8:	00 97       	sbiw	r24, 0x00	; 0
    18ea:	09 f4       	brne	.+2      	; 0x18ee <MPU401_ResetDone+0x12>
    18ec:	08 95       	ret
    18ee:	81 50       	subi	r24, 0x01	; 1
    18f0:	ae d8       	rcall	.-3748   	; 0xa4e <MPU401_WriteCommand>
    18f2:	10 92 01 07 	sts	0x0701, r1
    18f6:	10 92 00 07 	sts	0x0700, r1
    18fa:	08 95       	ret

000018fc <MPU401_Init>:
}

/* HardMPU: Initialisation */
void MPU401_Init(bool delaysysex,bool fakeallnotesoff)
{
    18fc:	cf 93       	push	r28
    18fe:	df 93       	push	r29
    1900:	00 d0       	rcall	.+0      	; 0x1902 <MPU401_Init+0x6>
    1902:	cd b7       	in	r28, 0x3d	; 61
    1904:	de b7       	in	r29, 0x3e	; 62
	/* Initalise PIC code */
	PIC_Init();
    1906:	6a 83       	std	Y+2, r22	; 0x02
    1908:	89 83       	std	Y+1, r24	; 0x01
    190a:	59 d0       	rcall	.+178    	; 0x19be <PIC_Init>

	/* Initialise MIDI handler */
        MIDI_Init(delaysysex,fakeallnotesoff);
    190c:	6a 81       	ldd	r22, Y+2	; 0x02
    190e:	89 81       	ldd	r24, Y+1	; 0x01
    1910:	0e 94 4c 03 	call	0x698	; 0x698 <MIDI_Init>
	if (!MIDI_Available()) return;
    1914:	0e 94 49 03 	call	0x692	; 0x692 <MIDI_Available>
    1918:	81 11       	cpse	r24, r1
    191a:	05 c0       	rjmp	.+10     	; 0x1926 <MPU401_Init+0x2a>
        mpu.intelligent=true; /* Default is on */
	if (!mpu.intelligent) return;

        /* SOFTMPU: Moved IRQ 9 handler init to asm */
	MPU401_Reset();
}
    191c:	0f 90       	pop	r0
    191e:	0f 90       	pop	r0
    1920:	df 91       	pop	r29
    1922:	cf 91       	pop	r28
    1924:	08 95       	ret

	/* Initialise MIDI handler */
        MIDI_Init(delaysysex,fakeallnotesoff);
	if (!MIDI_Available()) return;

	mpu.queue_used=0;
    1926:	10 92 70 06 	sts	0x0670, r1
    192a:	10 92 6f 06 	sts	0x066F, r1
	mpu.queue_pos=0;
    192e:	10 92 6e 06 	sts	0x066E, r1
    1932:	10 92 6d 06 	sts	0x066D, r1
	mpu.mode=M_UART;
    1936:	10 92 4c 06 	sts	0x064C, r1
        mpu.mpu_ver_fix=false; /* SOFTMPU */
    193a:	10 92 4b 06 	sts	0x064B, r1

        mpu.intelligent=true; /* Default is on */
    193e:	81 e0       	ldi	r24, 0x01	; 1
    1940:	80 93 4a 06 	sts	0x064A, r24
	if (!mpu.intelligent) return;

        /* SOFTMPU: Moved IRQ 9 handler init to asm */
	MPU401_Reset();
}
    1944:	0f 90       	pop	r0
    1946:	0f 90       	pop	r0
    1948:	df 91       	pop	r29
    194a:	cf 91       	pop	r28

        mpu.intelligent=true; /* Default is on */
	if (!mpu.intelligent) return;

        /* SOFTMPU: Moved IRQ 9 handler init to asm */
	MPU401_Reset();
    194c:	0c 94 ca 03 	jmp	0x794	; 0x794 <MPU401_Reset>

00001950 <PIC_AddEvent>:
/* SOFTMPU: Event countdown timers */
static Bitu event_countdown[NUM_EVENTS];
extern Bitu MIDI_sysex_delay; /* SOFTMPU: Initialised in midi.c */

void PIC_AddEvent(EventID event, Bitu delay)
{
    1950:	cf 93       	push	r28
    1952:	df 93       	push	r29
    1954:	00 d0       	rcall	.+0      	; 0x1956 <PIC_AddEvent+0x6>
    1956:	1f 92       	push	r1
    1958:	cd b7       	in	r28, 0x3d	; 61
    195a:	de b7       	in	r29, 0x3e	; 62
        /* Dispatch event immediately on zero delay */
        /* Watch out for blocking loops here... */
        if (delay==0)
    195c:	61 15       	cp	r22, r1
    195e:	71 05       	cpc	r23, r1
    1960:	61 f4       	brne	.+24     	; 0x197a <PIC_AddEvent+0x2a>
        {
                switch (event)
    1962:	81 30       	cpi	r24, 0x01	; 1
    1964:	c1 f0       	breq	.+48     	; 0x1996 <PIC_AddEvent+0x46>
    1966:	f8 f0       	brcs	.+62     	; 0x19a6 <PIC_AddEvent+0x56>
    1968:	82 30       	cpi	r24, 0x02	; 2
    196a:	39 f4       	brne	.+14     	; 0x197a <PIC_AddEvent+0x2a>
                        break;
                case RESET_DONE:
                        MPU401_ResetDone();
                        break;
                case EOI_HANDLER:
                        MPU401_EOIHandler();
    196c:	6a 83       	std	Y+2, r22	; 0x02
    196e:	7b 83       	std	Y+3, r23	; 0x03
    1970:	89 83       	std	Y+1, r24	; 0x01
    1972:	92 da       	rcall	.-2780   	; 0xe98 <MPU401_EOIHandler>
    1974:	89 81       	ldd	r24, Y+1	; 0x01
    1976:	7b 81       	ldd	r23, Y+3	; 0x03
    1978:	6a 81       	ldd	r22, Y+2	; 0x02
                        break;
                }
        }

        /* SOFTMPU: Set the countdown timer */
        event_countdown[event]=delay;
    197a:	e8 2f       	mov	r30, r24
    197c:	f0 e0       	ldi	r31, 0x00	; 0
    197e:	ee 0f       	add	r30, r30
    1980:	ff 1f       	adc	r31, r31
    1982:	ea 5e       	subi	r30, 0xEA	; 234
    1984:	f8 4f       	sbci	r31, 0xF8	; 248
    1986:	71 83       	std	Z+1, r23	; 0x01
    1988:	60 83       	st	Z, r22
}
    198a:	0f 90       	pop	r0
    198c:	0f 90       	pop	r0
    198e:	0f 90       	pop	r0
    1990:	df 91       	pop	r29
    1992:	cf 91       	pop	r28
    1994:	08 95       	ret
                        /* Don't dispatch immediately as we'll enter an
                        infinite loop if tempo is high enough */
                        delay=1; /* Enforce minimum delay */
                        break;
                case RESET_DONE:
                        MPU401_ResetDone();
    1996:	6a 83       	std	Y+2, r22	; 0x02
    1998:	7b 83       	std	Y+3, r23	; 0x03
    199a:	89 83       	std	Y+1, r24	; 0x01
    199c:	9f df       	rcall	.-194    	; 0x18dc <MPU401_ResetDone>
                        break;
    199e:	6a 81       	ldd	r22, Y+2	; 0x02
    19a0:	7b 81       	ldd	r23, Y+3	; 0x03
    19a2:	89 81       	ldd	r24, Y+1	; 0x01
    19a4:	ea cf       	rjmp	.-44     	; 0x197a <PIC_AddEvent+0x2a>
                switch (event)
                {
                case MPU_EVENT:
                        /* Don't dispatch immediately as we'll enter an
                        infinite loop if tempo is high enough */
                        delay=1; /* Enforce minimum delay */
    19a6:	61 e0       	ldi	r22, 0x01	; 1
    19a8:	70 e0       	ldi	r23, 0x00	; 0
    19aa:	e7 cf       	rjmp	.-50     	; 0x197a <PIC_AddEvent+0x2a>

000019ac <PIC_RemoveEvents>:
}

void PIC_RemoveEvents(EventID event)
{
        /* SOFTMPU: Zero the countdown timer (disable event) */
        event_countdown[event]=0;
    19ac:	e8 2f       	mov	r30, r24
    19ae:	f0 e0       	ldi	r31, 0x00	; 0
    19b0:	ee 0f       	add	r30, r30
    19b2:	ff 1f       	adc	r31, r31
    19b4:	ea 5e       	subi	r30, 0xEA	; 234
    19b6:	f8 4f       	sbci	r31, 0xF8	; 248
    19b8:	11 82       	std	Z+1, r1	; 0x01
    19ba:	10 82       	st	Z, r1
    19bc:	08 95       	ret

000019be <PIC_Init>:
    19be:	10 92 17 07 	sts	0x0717, r1
    19c2:	10 92 16 07 	sts	0x0716, r1
    19c6:	10 92 19 07 	sts	0x0719, r1
    19ca:	10 92 18 07 	sts	0x0718, r1
    19ce:	10 92 1b 07 	sts	0x071B, r1
    19d2:	10 92 1a 07 	sts	0x071A, r1
    19d6:	08 95       	ret

000019d8 <__vector_13>:
        }
}

//void PIC_Update(bool blocking)
ISR(TIMER1_COMPA_vect)
{
    19d8:	1f 92       	push	r1
    19da:	0f 92       	push	r0
    19dc:	0f b6       	in	r0, 0x3f	; 63
    19de:	0f 92       	push	r0
    19e0:	11 24       	eor	r1, r1
    19e2:	0b b6       	in	r0, 0x3b	; 59
    19e4:	0f 92       	push	r0
    19e6:	2f 93       	push	r18
    19e8:	3f 93       	push	r19
    19ea:	4f 93       	push	r20
    19ec:	5f 93       	push	r21
    19ee:	6f 93       	push	r22
    19f0:	7f 93       	push	r23
    19f2:	8f 93       	push	r24
    19f4:	9f 93       	push	r25
    19f6:	af 93       	push	r26
    19f8:	bf 93       	push	r27
    19fa:	ef 93       	push	r30
    19fc:	ff 93       	push	r31
        {
                _delay_us(250);
        } */

        /* SOFTMPU: Decrement sysex delay used in midi.c */
        if (MIDI_sysex_delay > 0)
    19fe:	80 91 1c 07 	lds	r24, 0x071C
    1a02:	90 91 1d 07 	lds	r25, 0x071D
    1a06:	00 97       	sbiw	r24, 0x00	; 0
    1a08:	29 f0       	breq	.+10     	; 0x1a14 <__vector_13+0x3c>
        {
                MIDI_sysex_delay--;
    1a0a:	01 97       	sbiw	r24, 0x01	; 1
    1a0c:	90 93 1d 07 	sts	0x071D, r25
    1a10:	80 93 1c 07 	sts	0x071C, r24
        }

        /* SOFTMPU: Decrement countdown timers and dispatch as needed */
        for (i=0;i<NUM_EVENTS;i++)
        {
                if (event_countdown[i] > 0)
    1a14:	80 91 16 07 	lds	r24, 0x0716
    1a18:	90 91 17 07 	lds	r25, 0x0717
    1a1c:	00 97       	sbiw	r24, 0x00	; 0
    1a1e:	39 f0       	breq	.+14     	; 0x1a2e <__vector_13+0x56>
                {
                        event_countdown[i]--;
    1a20:	01 97       	sbiw	r24, 0x01	; 1
    1a22:	90 93 17 07 	sts	0x0717, r25
    1a26:	80 93 16 07 	sts	0x0716, r24

                        if (event_countdown[i]==0)
    1a2a:	89 2b       	or	r24, r25
    1a2c:	71 f1       	breq	.+92     	; 0x1a8a <__vector_13+0xb2>
        }

        /* SOFTMPU: Decrement countdown timers and dispatch as needed */
        for (i=0;i<NUM_EVENTS;i++)
        {
                if (event_countdown[i] > 0)
    1a2e:	80 91 18 07 	lds	r24, 0x0718
    1a32:	90 91 19 07 	lds	r25, 0x0719
    1a36:	00 97       	sbiw	r24, 0x00	; 0
    1a38:	39 f0       	breq	.+14     	; 0x1a48 <__vector_13+0x70>
                {
                        event_countdown[i]--;
    1a3a:	01 97       	sbiw	r24, 0x01	; 1
    1a3c:	90 93 19 07 	sts	0x0719, r25
    1a40:	80 93 18 07 	sts	0x0718, r24

                        if (event_countdown[i]==0)
    1a44:	89 2b       	or	r24, r25
    1a46:	19 f1       	breq	.+70     	; 0x1a8e <__vector_13+0xb6>
        }

        /* SOFTMPU: Decrement countdown timers and dispatch as needed */
        for (i=0;i<NUM_EVENTS;i++)
        {
                if (event_countdown[i] > 0)
    1a48:	80 91 1a 07 	lds	r24, 0x071A
    1a4c:	90 91 1b 07 	lds	r25, 0x071B
    1a50:	00 97       	sbiw	r24, 0x00	; 0
    1a52:	41 f0       	breq	.+16     	; 0x1a64 <__vector_13+0x8c>
                {
                        event_countdown[i]--;
    1a54:	01 97       	sbiw	r24, 0x01	; 1
    1a56:	90 93 1b 07 	sts	0x071B, r25
    1a5a:	80 93 1a 07 	sts	0x071A, r24

                        if (event_countdown[i]==0)
    1a5e:	89 2b       	or	r24, r25
    1a60:	09 f4       	brne	.+2      	; 0x1a64 <__vector_13+0x8c>
                                                break;
                                        case RESET_DONE:
                                                MPU401_ResetDone();
                                                break;
                                        case EOI_HANDLER:
                                                MPU401_EOIHandler();
    1a62:	1a da       	rcall	.-3020   	; 0xe98 <MPU401_EOIHandler>
                                                break;
                                }
                        }
                }
        }
}
    1a64:	ff 91       	pop	r31
    1a66:	ef 91       	pop	r30
    1a68:	bf 91       	pop	r27
    1a6a:	af 91       	pop	r26
    1a6c:	9f 91       	pop	r25
    1a6e:	8f 91       	pop	r24
    1a70:	7f 91       	pop	r23
    1a72:	6f 91       	pop	r22
    1a74:	5f 91       	pop	r21
    1a76:	4f 91       	pop	r20
    1a78:	3f 91       	pop	r19
    1a7a:	2f 91       	pop	r18
    1a7c:	0f 90       	pop	r0
    1a7e:	0b be       	out	0x3b, r0	; 59
    1a80:	0f 90       	pop	r0
    1a82:	0f be       	out	0x3f, r0	; 63
    1a84:	0f 90       	pop	r0
    1a86:	1f 90       	pop	r1
    1a88:	18 95       	reti
                        {
                                /* Dispatch */
                                switch (i)
                                {
                                        case MPU_EVENT:
                                                MPU401_Event();
    1a8a:	f6 da       	rcall	.-2580   	; 0x1078 <MPU401_Event>
    1a8c:	d0 cf       	rjmp	.-96     	; 0x1a2e <__vector_13+0x56>
                                                break;
                                        case RESET_DONE:
                                                MPU401_ResetDone();
    1a8e:	26 df       	rcall	.-436    	; 0x18dc <MPU401_ResetDone>
    1a90:	db cf       	rjmp	.-74     	; 0x1a48 <__vector_13+0x70>

00001a92 <__udivmodhi4>:
    1a92:	aa 1b       	sub	r26, r26
    1a94:	bb 1b       	sub	r27, r27
    1a96:	51 e1       	ldi	r21, 0x11	; 17
    1a98:	07 c0       	rjmp	.+14     	; 0x1aa8 <__udivmodhi4_ep>

00001a9a <__udivmodhi4_loop>:
    1a9a:	aa 1f       	adc	r26, r26
    1a9c:	bb 1f       	adc	r27, r27
    1a9e:	a6 17       	cp	r26, r22
    1aa0:	b7 07       	cpc	r27, r23
    1aa2:	10 f0       	brcs	.+4      	; 0x1aa8 <__udivmodhi4_ep>
    1aa4:	a6 1b       	sub	r26, r22
    1aa6:	b7 0b       	sbc	r27, r23

00001aa8 <__udivmodhi4_ep>:
    1aa8:	88 1f       	adc	r24, r24
    1aaa:	99 1f       	adc	r25, r25
    1aac:	5a 95       	dec	r21
    1aae:	a9 f7       	brne	.-22     	; 0x1a9a <__udivmodhi4_loop>
    1ab0:	80 95       	com	r24
    1ab2:	90 95       	com	r25
    1ab4:	bc 01       	movw	r22, r24
    1ab6:	cd 01       	movw	r24, r26
    1ab8:	08 95       	ret

00001aba <__tablejump2__>:
    1aba:	ee 0f       	add	r30, r30
    1abc:	ff 1f       	adc	r31, r31

00001abe <__tablejump__>:
    1abe:	05 90       	lpm	r0, Z+
    1ac0:	f4 91       	lpm	r31, Z
    1ac2:	e0 2d       	mov	r30, r0
    1ac4:	09 94       	ijmp

00001ac6 <_exit>:
    1ac6:	f8 94       	cli

00001ac8 <__stop_program>:
    1ac8:	ff cf       	rjmp	.-2      	; 0x1ac8 <__stop_program>
